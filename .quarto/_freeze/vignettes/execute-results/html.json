{
  "hash": "71cdee457d9feba8136f75a31708cbc1",
  "result": {
    "markdown": "# Vignettes {#sec-vignettes}\n\n\n::: {.cell}\n\n:::\n\n\nA vignette is a long-form guide to your package.\nFunction documentation is great if you know the name of the function you need, but it's useless otherwise.\nIn contrast, a vignette can be framed around a target problem that your package is designed to solve.\nThe vignette format is perfect for showing a workflow that solves that particular problem, start to finish.\nVignettes afford you different opportunities than help topics: you have much more control over the integration of code and prose and it's a better setting for showing how multiple functions work together.\n\nMany existing packages have vignettes and you can see all the vignettes associated with your installed packages with `browseVignettes()`.\nTo limit that to a particular package, you can specify the package's name like so: `browseVignettes(\"tidyr\")`.\nYou can read a specific vignette with the `vignette()` function, e.g. `vignette(\"rectangle\", package = \"tidyr\")`.\nTo see vignettes for a package that you haven't installed, look at the \"Vignettes\" listing on its CRAN page, e.g. <https://cran.r-project.org/web/packages/tidyr/index.html>.\n\nHowever, we much prefer to discover and read vignettes from a package's website, which is the topic of @sec-website[^vignettes-1].\nCompare the above to what it feels like to access tidyr's vignettes from its website: <https://tidyr.tidyverse.org/articles/index.html>.\nNote that pkgdown uses the term \"article\", which feels like the right vocabulary for package users.\nThe technical distinction between a vignette (which ships with a package) and an article (which is only available on the website; see @sec-vignettes-article) is something the package developer needs to think about.\nA pkgdown website presents all of the documentation of a package in a cohesive, interlinked way that makes it more navigable and useful.\nThis chapter is ostensibly about vignettes, but the way we do things is heavily influenced by how those vignettes fit into a pkgdown website.\n\n[^vignettes-1]: This obviously depends on the quality of one's internet connection, so we make an effort to recommend behaviours that are compatible with base R's tooling around installed vignettes.\n\nIn this book, we're going to use R Markdown to write our vignettes[^vignettes-2], just as we did for function documentation in @sec-man-key-md-features. If you're not already familiar with R Markdown you'll need to learn the basics elsewhere; a good place to start is <https://rmarkdown.rstudio.com/>.\n\n[^vignettes-2]: Sweave is the original system used for authoring vignettes (Sweave files usually have extension `.Rnw`).\n    Similar to our advice about how to author function documentation (@sec-man), we think it makes more sense to use a markdown-based syntax for vignettes than a one-off, LaTeX-associated format.\n    This choice also affects the form of rendered vignettes: Sweave vignettes render to PDF, whereas R Markdown vignettes render to HTML.\n    We recommend converting Sweave vignettes to R Markdown.\n\nIn general, we embrace a somewhat circumscribed vignette workflow, i.e. there are many things that base R allows for, that we simply don't engage in.\nFor example, we treat `inst/doc/`[^vignettes-3] in the same way as `man/` and `NAMESPACE`, i.e. as something semi-opaque that is managed by automated tooling and that we don't modify by hand.\nBase R's vignette system allows for various complicated maneuvers that we just try to avoid.\nIn vignettes, more than anywhere else, the answer to \"But how do I do X?\" is often \"Don't do X\".\n\n[^vignettes-3]: The `inst/doc/` folder is where vignettes go once they're built, when `R CMD build` makes the package bundle.\n\n## Workflow for writing a vignette {#sec-vignettes-workflow-writing}\n\nTo create your first vignette, run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_vignette(\"my-vignette\")\n```\n:::\n\n\nThis does the following:\n\n1.  Creates a `vignettes/` directory.\n\n2.  Adds the necessary dependencies to `DESCRIPTION`, i.e. adds knitr to the `VignetteBuilder` field and adds both knitr and rmarkdown to `Suggests`.\n\n3.  Drafts a vignette, `vignettes/my-vignette.Rmd`.\n\n4.  Adds some patterns to `.gitignore` to ensure that files created as a side effect of previewing your vignettes are kept out of source control (we'll say more about this later).\n\nThis draft document has the key elements of an R Markdown vignette and leaves you in a position to add your content.\nYou also call `use_vignette()` to create your second and all subsequent vignettes; it will just skip any setup that's already been done.\n\nOnce you have the draft vignette, the workflow is straightforward:\n\n1.  Start adding prose and code chunks to the vignette.\n    Use `devtools::load_all()` as needed and use your usual interactive workflow for developing the code chunks.\n\n2.  Render the entire vignette periodically.\n\n    This requires some intention, because unlike tests, by default, a vignette is rendered using the currently installed version of your package, not with the current source package, thanks to the initial call to `library(yourpackage)`.\n\n    One option is to properly install your current source package with `devtools::install()` or, in RStudio, Ctrl/Cmd + Shift + B.\n    Then use your usual workflow for rendering an `.Rmd` file.\n    For example, press Ctrl/Cmd + Shift + K or click ![](images/knit.png){width=\"45\"}.\n\n    Or you could properly install your package and request that vignettes be built, with `install(build_vignettes = TRUE)`, then use `browseVignettes()`.\n\n    Another option is to use `devtools::build_rmd(\"vignettes/my-vignette.Rmd\")` to render the vignette.\n    This builds your vignette against a (temporarily installed) development version of your package.\n\n    It's very easy to overlook this issue and be puzzled when your vignette preview doesn't seem to reflect recent developments in the package.\n    Double check that you're building against the current version!\n\n3.  Rinse and repeat until the vignette looks the way you want.\n\nIf you're regularly checking your entire package (@sec-workflow101-r-cmd-check), which we strongly recommend, this will help to keep your vignettes in good working order.\nIn particular, this will alert you if a vignette makes use of a package that's not a formal dependency.\nWe will come back to these package-level workflow issues below in @sec-vignettes-how-built-checked.\n\n## Metadata\n\nThe first few lines of the vignette contain important metadata.\nThe default template contains the following information:\n\n```         \n---\ntitle: \"Vignette Title\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n```\n\nThis metadata is written in [YAML](https://yaml.org/), a format designed to be both human and computer readable.\nYAML frontmatter is a common feature of R Markdown files.\nThe syntax is much like that of the `DESCRIPTION` file, where each line consists of a field name, a colon, then the value of the field.\nThe one special YAML feature we're using here is `>`.\nIt indicates that the following lines of text are plain text and shouldn't use any special YAML features.\n\nThe default vignette template uses these fields:\n\n-   `title`: this is the title that appears in the vignette.\n    If you change it, make sure to make the same change to `VignetteIndexEntry{}`.\n    They should be the same, but unfortunately that's not automatic.\n\n-   `output`: this specifies the output format.\n    There are many options that are useful for regular reports (including html, pdf, slideshows, etc.), but `rmarkdown::html_vignette` has been specifically designed for this exact purpose.\n    See `?rmarkdown::html_vignette` for more details.\n\n-   `vignette`: this is a block of special metadata needed by R.\n    Here, you can see the legacy of LaTeX vignettes: the metadata looks like LaTeX comments.\n    The only entry you might need to modify is the `\\VignetteIndexEntry{}`.\n    This is how the vignette appears in the vignette index and it should match the `title`.\n    Leave the other two lines alone.\n    They tell R to use `knitr` to process the file and that the file is encoded in UTF-8 (the only encoding you should ever use for a vignette).\n\nWe generally don't use these fields, but you will see them in other packages:\n\n-   `author`: we don't use this unless the vignette is written by someone not already credited as a package author.\n\n-   `date`: we think this usually does more harm than good, since it's not clear what the `date` is meant to convey.\n    Is it the last time the vignette source was updated?\n    In that case you'll have to manage it manually and it's easy to forget to update it.\n    If you manage `date` programmatically with `Sys.date()`, the date reflects when the vignette was built, i.e. when the package bundle was created, which has nothing to do with when the vignette or package was last modified.\n    We've decided it's best to omit the `date`.\n\nThe draft vignette also includes two R chunks.\nThe first one configures our preferred way of displaying code output and looks like this:\n\n\n\n````default\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\"\n)\n```\n\n````\n\nThe second chunk just attaches the package the vignette belongs to.\n\n\n````default\n```{r setup}\nlibrary(yourpackage)\n```\n````\n\nYou might be tempted to (temporarily) replace this `library()` call with `load_all()`, but we advise that you don't.\nInstead, use the techniques given in @sec-vignettes-workflow-writing to exercise your vignette code with the current source package.\n\n## Advice on writing vignettes\n\n> If you're thinking without writing, you only think you're thinking.\n> --- Leslie Lamport\n\nWhen writing a vignette, you're teaching someone how to use your package.\nYou need to put yourself in the reader's shoes, and adopt a \"beginner's mind\".\nThis can be difficult because it's hard to forget all of the knowledge that you've already internalized.\nFor this reason, we find in-person teaching to be a really useful way to get feedback.\nYou're immediately confronted with what you've forgotten that only you know.\n\nA useful side effect of this approach is that it helps you improve your code.\nIt forces you to re-see the initial on-boarding process and to appreciate the parts that are hard.\nOur experience is that explaining how code works often reveals some problems that need fixing.\n\nIn fact, a key part of the tidyverse package release process is writing a blog post: we now do that before submitting to CRAN, because of the number of times it's revealed some subtle problem that requires a fix.\nIt's also fair to say that the tidyverse and its supporting packages would benefit from more \"how-to\" guides, so that's an area where we are constantly trying to improve.\n\nWriting a vignette also makes a nice break from coding.\nWriting seems to use a different part of the brain from programming, so if you're sick of programming, try writing for a bit.\n\nHere are some resources we've found helpful:\n\n-   Literally anything written by Kathy Sierra.\n    She is not actively writing at the moment, but her content is mostly timeless and is full of advice about programming, teaching, and how to create valuable tools.\n    See her original blog, [Creating passionate users](https://headrush.typepad.com/), or the site that came after, [Serious Pony](https://seriouspony.com/blog/).\n\n-   \"Style: Lessons in Clarity and Grace\" by Joseph M. Williams and Joseph Bizup.\n    This book helps you understand the structure of writing so that you'll be better able to recognise and fix bad writing.\n\n### Diagrams\n\n::: callout-warning\n## Submitting to CRAN\n\nYou'll need to watch the file size.\nIf you include a lot of graphics, it's easy to create a very large file.\nBe on the look out for a `NOTE` that complains about an overly large directory.\nYou might need to take explicit measures, such as lowering the resolution, reducing the number of figures, or switching from a vignette to an article (@sec-vignettes-article).\n:::\n\n### Links\n\nThere is no official way to link to help topics from vignettes or *vice versa* or from one vignette to another.\n\nThis is a concrete example of why we think pkgdown sites are a great way to present package documentation, because pkgdown makes it easy (literally zero effort, in many cases) to get these hyperlinked cross-references.\nThis is documented in `vignette(\"linking\", package = \"pkgdown\")`.\nIf you're reading this book online, the inline call to `vignette()` in the previous sentence should be hyperlinked to the corresponding vignette in pkgdown[^vignettes-4], using the same toolchain that will create automatic links in your pkgdown websites!\nWe discussed this syntax previously in @sec-man-key-md-features, in the context of function documentation.\n\n[^vignettes-4]: And, for anyone else, executing this code in the R console will open the vignette, if the host package is installed.\n\nAutomatic links are generated for functions in the host package, namespace-qualified functions in another package, vignettes, and more.\nHere are the two most important examples of automatically linked text:\n\n-   `` `some_function()` ``: Autolinked to the documentation of `some_function()`, within the pkgdown site of its host package.\n    Note the use of backticks and the trailing parentheses.\n\n-   `` `vignette(\"fascinating-topic\")` ``: Autolinked to the \"fascinating-topic\" article within the pkgdown site of its host package.\n    Note the use of backticks.\n\n### Filepaths\n\nSometimes it is necessary to refer to another file from a vignette.\nThe best way to do this depends on the application:\n\n-   A figure created by code evaluated in the vignette: By default, in the `.Rmd` workflow that we recommend, this takes care of itself.\n    Such figures are automatically embedded into the `.html` using data URIs.\n    You don't need to do anything.\n    Example: `vignette(\"extending-ggplot2\", package = \"ggplot2\")` generates a few figures in evaluated code chunks.\n\n-   An external file that could be useful to users or elsewhere in the package (not just in vignettes): Put such a file in `inst/` (@sec-misc-inst), perhaps in `inst/extdata/` (@sec-data-extdata), and refer to it with `system.file()` or `fs::path_package()` (@sec-data-system-file).\n    Example from `vignette(\"sf2\", package = \"sf\")`:\n\n\n    \n    ````default\n    ````{r}\n    library(sf)\n    fname <- system.file(\"shape/nc.shp\", package=\"sf\")\n    fname\n    nc <- st_read(fname)\n    ```\n    \n    ````\n\n-   An external file whose utility is limited to your vignettes: put it alongside the vignette source files in `vignettes/` and refer to it with a filepath that is relative to `vignettes/`.\n\n    Example: The source of `vignette(\"tidy-data\", package = \"tidyr\")` is found at `vignettes/tidy-data.Rmd` and it includes a chunk that reads a file located at `vignettes/weather.csv` like so:\n\n\n    \n    ````default\n    ```{r}\n    weather <- as_tibble(read.csv(\"weather.csv\", stringsAsFactors = FALSE))\n    weather\n    ```\n    \n    ````\n\n-   An external graphics file: put it in `vignettes/`, refer to it with a filepath that is relative to `vignettes/` and use `knitr::include_graphics()` inside a code chunk.\n    Example from `vignette(\"sheet-geometry\", package = \"readxl\")`:\n\n\n    \n    ````default\n    ```{r out.width = '70%', echo = FALSE}\n    knitr::include_graphics(\"img/geometry.png\")\n    ```\n    \n    ````\n\n### How many vignettes?\n\nFor simpler packages, one vignette is often sufficient.\nIf your package is named \"somepackage\", call this vignette `somepackage.Rmd`.\nThis takes advantage of a pkgdown convention, where the vignette that's named after the package gets an automatic \"Get started\" link in the top navigation bar.\n\nMore complicated packages probably need more than one vignette.\nIt can be helpful to think of vignettes like chapters of a book -- they should be self-contained, but still link together into a cohesive whole.\n\n### Scientific publication\n\nVignettes can also be useful if you want to explain the details of your package.\nFor example, if you have implemented a complex statistical algorithm, you might want to describe all the details in a vignette so that users of your package can understand what's going on under the hood, and be confident that you've implemented the algorithm correctly.\nIn this case, you might also consider submitting your vignette to the [Journal of Statistical Software](http://jstatsoft.org/) or [The R Journal](http://journal.r-project.org/).\nBoth journals are electronic only and peer-reviewed.\nComments from reviewers can be very helpful for improving your package and vignette.\n\nIf you just want to provide something very lightweight so folks can easily cite your package, consider the [Journal of Open Source Software](https://joss.theoj.org).\nThis journal has a particularly speedy submission and review process, and is where we published \"[*Welcome to the Tidyverse*](https://joss.theoj.org/papers/10.21105/joss.01686)\", a paper we wrote so that folks could have a single paper to cite and all the tidyverse authors would get some academic credit.\n\n## Special considerations for vignette code {#sec-vignettes-eval-option}\n\nA recurring theme is that the R code inside a package needs to be written differently from the code in your analysis scripts and reports.\nThis is true for your functions (@sec-code-when-executed), tests (@sec-testing-design-principles), and examples (@sec-man-examples), and it's also true for vignettes.\nIn terms of what you can and cannot do, vignettes are fairly similar to examples, although some of the mechanics differ.\n\nAny package used in a vignette must be a formal dependency, i.e. it must be listed in `Imports` or `Suggests` in `DESCRIPTION`.\nSimilar to our stance in tests (@sec-dependencies-in-suggests-in-tests), our policy is to write vignettes under the assumption that suggested packages will be installed in any context where the vignette is being built (@sec-dependencies-in-suggests-in-examples-and-vignettes).\nWe generally use suggested packages unconditionally in vignettes.\nBut, as with tests, if a package is particularly hard to install, we might make an exception and take extra measures to guard its use.\n\nThere are many other reasons why it might not be possible to evaluate all of the code in a vignette in certain contexts, such as on CRAN's machines or in CI/CD.\nThese include all the usual suspects: lack of authentication credentials, long-running code, or code that is vulnerable to intermittent failure.\n\nThe main method for controlling evaluation in an `.Rmd` document is the `eval` code chunk option, which can be `TRUE` (the default) or `FALSE`.\nImportantly, the value of `eval` can be the result of evaluating an expression.\nHere are some relevant examples:\n\n-   `eval = requireNamespace(\"somedependency\")`\n-   `eval = !identical(Sys.getenv(\"SOME_THING_YOU_NEED\"), \"\")`\n-   `eval = file.exists(\"credentials-you-need\")`\n\nThe `eval` option can be set for an individual chunk, but in a vignette it's likely that you'll want to evaluate most or all of the chunks or practically none of them.\nIn the latter case, you'll want to use `knitr::opts_chunk$set(eval = FALSE)` in an early, hidden chunk to make `eval = FALSE` the default for the remainder of the vignette.\nYou can still override with `eval = TRUE` in individual chunks.\n\nIn vignettes, we use the `eval` option in a similar way as `@examplesIf` in examples (@sec-man-examples-dependencies-conditional-execution).\nIf the code can only be run under specific conditions, you must find a way to to check for those pre-conditions programmatically at runtime and use the result to set the `eval` option.\n\nHere are the first few chunks in a vignette from googlesheets4, which wraps the Google Sheets API. The vignette code can only be run if we are able to decrypt a token that allows us to authenticate with the API.\nThat fact is recorded in `can_decrypt`, which is then set as the vignette-wide default for `eval`.\n\n\n\n````default\n```{r setup, include = FALSE}\ncan_decrypt <- gargle:::secret_can_decrypt(\"googlesheets4\")\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  error = TRUE,\n  eval = can_decrypt\n)\n```\n\n```{r eval = !can_decrypt, echo = FALSE, comment = NA}\nmessage(\"No token available. Code chunks will not be evaluated.\")\n```\n\n```{r index-auth, include = FALSE}\ngooglesheets4:::gs4_auth_docs()\n```\n\n```{r}\nlibrary(googlesheets4)\n```\n\n````\n\nNotice the second chunk uses `eval = !can_decrypt`, which prints an explanatory message for anyone who builds the vignette without the necessary credentials.\n\nThe example above shows a few more handy chunk options.\nUse `include = FALSE` for chunks that should be evaluated but not seen in the rendered vignette.\nThe `echo` option controls whether code is printed, in addition to output.\nFinally, `error = TRUE` is what allows you to purposefully execute code that could throw an error.\nThe error will appear in the vignette, just as it would for your user, but it won't prevent the execution of the rest of your vignette's code, nor will it cause `R CMD check` to fail.\nThis is something that works much better in a vignette than in an example.\n\nMany other options are described at <https://yihui.name/knitr/options>.\n\n### Article instead of vignette {#sec-vignettes-article}\n\nThere is one last technique, if you don't want any of your code to execute on CRAN.\nInstead of a vignette, you can create an article, which is a term used by pkgdown for a vignette-like `.Rmd` document that is not shipped with the package, but that appears only in the website.\nAn article will be less accessible than a vignette, for certain users, such as those with limited internet access, because it is not present in the local installation.\nBut that might be an acceptable compromise, for example, for a package that wraps a web API.\n\nYou can draft a new article with `usethis::use_article()`, which ensures the article will be `.Rbuildignore`d.\nA great reason to use an article instead of a vignette is to show your package working in concert with other packages that you don't want to depend on formally.\nAnother compelling use case is when an article really demands lots of graphics.\nThis is problematic for a vignette, because the large size of the package causes problems with `R CMD check` (and, therefore, CRAN) and is also burdensome for everyone who installs it, especially those with limited internet.\n\n## How vignettes are built and checked {#sec-vignettes-how-built-checked}\n\nWe close this chapter by returning to a few workflow issues we didn't cover in @sec-vignettes-workflow-writing: How do the `.Rmd` files get turned into the vignettes consumed by users of an installed package?\nWhat does `R CMD check` do with vignettes?\nWhat are the implications for maintaining your vignettes?\n\nIt can be helpful to appreciate the big difference between the workflow for function documentation and vignettes.\nThe source of function documentation is stored in roxygen comments in `.R` files below `R/`.\nWe use `devtools::document()` to generate `.Rd` files below `man/`.\nThese `man/*.Rd` files are part of the source package.\nThe official R machinery cares *only* about the `.Rd` files.\n\nVignettes are very different because the `.Rmd` source is considered part of the source package and the official machinery (`R CMD build` and `check`) interacts with vignette source and built vignettes in many ways.\nThe result is that the vignette workflow feels more constrained, since the official tooling basically treats vignettes somewhat like tests, instead of documentation.\n\n### `R CMD build` and vignettes {#sec-vignettes-how-built}\n\nFirst, it's important to realize that the `vignettes/*.Rmd` source files exist only when a package is in source (@sec-source-package) or bundled form (@sec-bundled-package).\nVignettes are rendered when a source package is converted to a bundle via `R CMD build` or a convenience wrapper such as `devtools::build()`.\nThe rendered products (`.html`) are placed in `inst/doc/`, along with their source (`.Rmd`) and extracted R code (`.R`; discussed in @sec-vignettes-how-checked).\nFinally, when a package binary is made (@sec-structure-binary), the `inst/doc/` directory is promoted to a top-level `doc/` directory, as happens with everything below `inst/`.\n\n```{=html}\n<!--\nThe issue of keeping pre-built vignettes around in inst/doc/ is a long-running discussion.\n\nhttps://github.com/r-lib/devtools/issues/2394\n\nhttps://github.com/r-lib/pkgbuild/issues/58\n-->\n```\nThe key takeaway from the above is that it is awkward to keep rendered vignettes in a source package and this has implications for the vignette development workflow.\nIt is tempting to fight this (and many have tried), but based on years of experience and discussion, the devtools philosophy is to accept this reality.\n\nAssuming that you don't try to keep built vignettes around persistently in your source package, here are our recommendations for various scenarios:\n\n-   Active, iterative work on your vignettes: Use your usual interactive `.Rmd` workflow (such as the ![](images/knit.png){width=\"45\"} button) or `devtools::build_rmd(\"vignettes/my-vignette.Rmd\")` to render a vignette to `.html` in the `vignettes/` directory.\n    Regard the `.html` as a disposable preview.\n    (If you initiate vignettes with `use_vignette()`, this `.html` will already be gitignored.)\n\n-   Make the current state of vignettes in a development version available to the world:\n\n    -   Offer a pkgdown website, preferably with automated \"build and deploy\", such as using GitHub Actions to deploy to GitHub Pages.\n        Here are tidyr's vignettes in the development version (note the \"dev\" in the URL): <https://tidyr.tidyverse.org/dev/articles/index.html>.\n\n    -   Be aware that anyone who installs directly from GitHub will need to explicitly request vignettes, e.g. with `devtools::install_github(dependencies = TRUE, build_vignettes = TRUE)`.\n\n-   Make the current state of vignettes in a development version available locally:\n\n    -   Install your package locally and request that vignettes be built and installed, e.g. with `devtools::install(dependencies = TRUE, build_vignettes = TRUE)`.\n\n-   Prepare built vignettes for a CRAN submission: Don't try to do this by hand or in advance.\n    Allow vignette (re-)building to happen as part of `devtools::submit_cran()` or `devtools::release()`, both of which build the package.\n\n```{=html}\n<!--\nhttps://github.com/r-lib/devtools/issues/2485\n-->\n```\nIf you really do want to build vignettes in the official manner on an *ad hoc* basis, `devtools::build_vignettes()` will do this.\nBut we've seen this lead to developer frustration, because it leaves the package in a peculiar form that is a mishmash of a source package and an unpacked package bundle.\nThis nonstandard situation can then lead to even more confusion.\nFor example, it's not clear how these not-actually-installed vignettes are meant to be accessed.\nMost developers should avoid using `build_vignettes()` and, instead, pick one of the approaches outlined above.\n\n::: callout-tip\n## Pre-built vignettes (or other documentation)\n\nWe highly recommend treating `inst/doc/` as a strictly machine-writable directory for vignettes.\nWe recommend that you do not take advantage of the fact that you can place arbitrary pre-built documentation in `inst/doc/`.\nThis opinion permeates the devtools ecosystem which, by default, cleans out `inst/doc/` during various development tasks, to combat the problem of stale documentation.\n\nHowever, we acknowledge that there are exceptions to every rule.\nIn some domains, it might be impractical to rebuild vignettes as often as our recommended workflow implies.\nHere are a few tips:\n\n-   You can prevent the cleaning of `inst/doc/` with `pkgbuild::build(clean_doc =)`.\n    You can put `Config/build/clean-inst-doc: FALSE` in `DESCRIPTION` to prevent pkgbuild and rcmdcheck from cleaning `inst/doc/`.\n\n-   The rOpenSci tech note [How to precompute package vignettes or pkgdown articles](https://ropensci.org/blog/2019/12/08/precompute-vignettes/) describes a clever, lightweight technique for keeping a manually-updated vignette in `vignettes/`.\n\n-   The [R.rsp](https://henrikbengtsson.github.io/R.rsp/index.html) package offers explicit support for static vignettes.\n:::\n\n### `R CMD check` and vignettes {#sec-vignettes-how-checked}\n\nWe conclude with a discussion of how vignettes are treated by `R CMD check`.\nThis official checker expects a package bundle created by `R CMD build`, as described above.\nIn the devtools workflow, we usually rely on `devtools::check()`, which automatically does this build step for us, before checking the package.\n`R CMD check` has various command line options and also consults many environment variables.\nWe're taking a maximalist approach here, i.e. we describe all the checks that *could* happen.\n\n`R CMD check` does some static analysis of vignette code and scrutinizes the existence, size, and modification times of various vignette-related files.\nIf your vignettes use packages that don't appear in `DESCRIPTION`, that is caught here.\nIf files that should exist don't exist or *vice versa*, that is caught here.\nThis should not happen if you use the standard vignette workflow outlined in this chapter and is usually the result of some experiment that you've done, intentionally or not.\n\nThe vignette code is then extracted into a `.R` file, using the \"tangle\" feature of the relevant vignette engine (knitr, in our case), and run.\nThe code originating from chunks marked as `eval = FALSE` will be commented out in this file and, therefore, is not executed.\nThen the vignettes are rebuilt from source, using the \"weave\" feature of the vignette engine (knitr, for us).\nThis executes all the vignette code yet again, except for chunks marked `eval = FALSE`.\n\n::: callout-warning\n## Submitting to CRAN\n\nCRAN's incoming and ongoing checks use `R CMD check` which, as described above, exercises vignette code up to two times.\nTherefore, it is important to conditionally suppress the execution of code that is doomed to fail on CRAN.\n\nHowever, it's important to note that the package bundle and binaries distributed by CRAN actually use the built vignettes included in your submission.\nYes, CRAN will attempt to rebuild your vignettes regularly, but this is for quality control purposes.\nCRAN distributes the vignettes you built.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}