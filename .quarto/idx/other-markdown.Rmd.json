{"title":"Other markdown files","markdown":{"headingText":"Other markdown files","headingAttr":{"id":"sec-other-markdown","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, echo = FALSE}\nsource(\"common.R\")\n```\n\nIn this chapter we highlight two files that are conventionally used to provide some package-level documentation.\nThese two are important, because they are featured on both the CRAN landing page and the pkgdown site for a package:\n\n-   `README.md`, which describes what the package does (@sec-readme).\n    The `README` plays an especially important role on GitHub or similar platforms.\n\n-   `NEWS.md`, which describes how the package has changed over time (@sec-news).\n\nEven if your package is intended for a very limited audience and might not ever be released on CRAN, these files can be very useful.\nThese two files don't have to be written in Markdown, but they can be.\nIn keeping with our practices for help topics and vignettes, it's our strong recommendation and it's what we describe here.\n\n## `README` {#sec-readme}\n\nFirst, we'll talk about the role of the `README` file and we leave off the file extension, until we're ready to talk about mechanics.\n\nThe goal of the `README` is to answer the following questions about your package:\n\n-   Why should I use it?\n-   How do I use it?\n-   How do I get it?\n\nThe `README` file is a long-established convention in software, going back decades.\nSome of its traditional content is found elsewhere in an R package, for example, we use the `DESCRIPTION` file to document authorship and licensing.\n\nWhen you write your `README`, try to put yourself in the shoes of someone who's come across your package and is trying to figure out if it solves a problem they have.\nIf they decide that your package looks promising, the `README` should also show them how to install it and how to do one or two basic tasks.\nHere's a good template for `README`:\n\n1.  A paragraph that describes the high-level purpose of the package.\n\n2.  An example that shows how to use the package to solve a simple problem.\n\n3.  Installation instructions, giving code that can be copied and pasted into R.\n\n4.  An overview that describes the main components of the package.\n    For more complex packages, this will point to vignettes for more details.\n    This is also a good place to describe how your package fits into the ecosystem of its target domain.\n\n### `README.Rmd` and `README.md`\n\nAs mentioned above, we prefer to write `README` in Markdown, i.e. to have `README.md`.\nThis will be rendered as HTML and displayed in several important contexts:\n\n-   The repository home page, if you maintain your package on GitHub (or a similar host).\n\n    -   [https://github.com/tidyverse/dplyr](https://github.com/tidyverse/dplyr#readme)\n\n-   On CRAN, if you release your package there.\n\n    -   <https://cran.r-project.org/web/packages/dplyr/index.html>\n\n        Notice the hyperlinked \"README\" under \"Materials\".\n\n-   As the home page of your pkgdown site, if you have one.\n\n    -   <https://dplyr.tidyverse.org>\n\nGiven that it's best to include a couple of examples in `README.md`, ideally you would generate it with R Markdown.\nThat is, it works well to have `README.Rmd` as the main source file, which you then render to `README.md`.\n\nThe easiest way to get started is to use `usethis::use_readme_rmd()`.[^other-markdown-1]\nThis creates a template `README.Rmd` and adds it to `.Rbuildignore`, since only `README.md` should be included in the package bundle.\nThe template looks like this:\n\n[^other-markdown-1]: If it really doesn't make sense to include any executable code chunks, `usethis::use_readme_md()` is similar, except that it gives you a basic `README.md` file.\n\n````{verbatim, lang = \"markdown\"}\n---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"man/figures/README-\",\n  out.width = \"100%\"\n)\n```\n\n# somepackage\n\n<!-- badges: start -->\n\n<!-- badges: end -->\n\nThe goal of somepackage is to ...\n\n## Installation\n\nYou can install the development version of somepackage from [GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"jane/somepackage\")\n```\n\n## Example\n\nThis is a basic example which shows you how to solve a common problem:\n\n```{r example}\nlibrary(somepackage)\n## basic example code\n```\n\nWhat is special about using `README.Rmd` instead of just `README.md`?\nYou can include R chunks like so:\n\n```{r cars}\nsummary(cars)\n```\n\nYou'll still need to render `README.Rmd` regularly, to keep `README.md` up-to-date.\n`devtools::build_readme()` is handy for this.\n\nYou can also embed plots, for example:\n\n```{r pressure, echo = FALSE}\nplot(pressure)\n```\n\nIn that case, don't forget to commit and push the resulting figure files, so they display on GitHub and CRAN.\n````\n\nA few things to note about this starter `README.Rmd`:\n\n-   It renders to [GitHub Flavored Markdown](https://github.github.com/gfm/).\n\n-   It includes a comment to remind you to edit `README.Rmd`, not `README.md`.\n\n-   It sets up our recommended knitr options, including saving images to `man/figures/README-` which ensures that they're included in your built package.\n    This is important so that your `README` works when it's displayed by CRAN.\n\n-   It sets up a place for future badges, such as results from automatic continuous integration checks (@sec-sw-dev-practices-ci).\n    Examples of functions that insert development badges:\n\n    -   `usethis::use_cran_badge()` reports the current version of your package on CRAN.\n\n    -   `usethis::use_coverage()` reports test coverage.\n\n    -   `use_github_actions()` and friends report the `R CMD check` status of your development package.\n\n-   It includes placeholders where you should provide code for package installation and for some basic usage.\n\n-   It reminds you of key facts about maintaining your `README`.\n\nYou'll need to remember to re-render `README.Rmd` periodically and, most especially, before release.\nThe best function to use for this is `devtools::build_readme()`, because it is guaranteed to render `README.Rmd` against the current source code of your package.\n\nThe devtools ecosystem tries to help you keep `README.Rmd` up-to-date in two ways:\n\n-   If your package is also a Git repo, `use_readme_rmd()` automatically adds the following pre-commit hook:\n\n    ``` bash\n    #!/bin/bash\n    if [[ README.Rmd -nt README.md ]]; then\n      echo \"README.md is out of date; please re-knit README.Rmd\"\n      exit 1\n    fi \n    ```\n\n    This prevents a `git commit` if `README.Rmd` is more recently modified than `README.md`.\n    If the hook is preventing a commit you really want to make, you can override it with `git commit --no-verify`.\n    Note that Git commit hooks are not stored in the repository, so this hook needs to be added to any fresh clone.\n    For example, you could re-run `usethis::use_readme_rmd()` and discard the changes to `README.Rmd`.\n\n-   The release checklist placed by `usethis::use_release_issue()` includes a reminder to call `devtools::build_readme()`.\n\n## `NEWS` {#sec-news}\n\nThe `README` is aimed at new users, whereas the `NEWS` file is aimed at existing users: it should list all the changes in each release that a user might notice or want to learn more about.\nAs with `README`, it's a well-established convention for open source software to have a `NEWS` file, which is also sometimes called a changelog.\n\nAs with `README`, base R tooling does not *require* that NEWS be a Markdown file, but it does allow for that and it's our strong preference.\nA `NEWS.md` file is pleasant to read on GitHub, on your pkgdown site, and is reachable from your package's CRAN landing page.\nWe demonstrate this again with dplyr:\n\n-   `NEWS.md` in dplyr's GitHub repo:\n\n    -   <https://github.com/tidyverse/dplyr/blob/main/NEWS.md>\n\n-   On CRAN, if you release your package there.\n\n    -   <https://cran.r-project.org/web/packages/dplyr/index.html>\n\n        Notice the hyperlinked \"NEWS\" under \"Materials\".\n\n-   On your package site, available as the \"Changelog\" from the \"News\" dropdown menu in the main navbar:\n\n    -   <https://dplyr.tidyverse.org/news/index.html>\n\nYou can use `usethis::use_news_md()` to initiate the `NEWS.md` file; many other lifecycle- and release-related functions in the devtools ecosystem will make appropriate changes to `NEWS.md` as your package evolves.\n\nHere's a hypothetical `NEWS.md` file:\n\n``` markdown\n# foofy (development version)\n\n* Better error message when grooving an invalid grobble (#206).\n\n# foofy 1.0.0\n\n## Major changes\n\n* Can now work with all grooveable grobbles!\n\n## Minor improvements and bug fixes\n\n* Printing scrobbles no longer errors (@githubusername, #100).\n\n* Wibbles are now 55% less jibbly (#200).\n```\n\nThe example above demonstrates some organizing principles for `NEWS.md`:\n\n-   Use a top-level heading for each version: e.g. `# somepackage 1.0.0`.\n    The most recent version should go at the top.\n    Typically the top-most entry in `NEWS.md` of your source package will read `# somepackage (development version)`.[^other-markdown-2]\n\n-   Each change should be part of a bulleted list.\n    If you have a lot of changes, you might want to break them up using subheadings, `## Major changes`, `## Bug fixes`, etc.\n\n    We usually stick with a simple list until we're close to a release, at which point we organize into sections and refine the text.\n    It's hard to know in advance exactly what sections you'll need.\n    The release checklist placed by `usethis::use_release_issue()` includes a reminder to polish the `NEWS.md` file.\n    In that phase, it can be helpful to remember that `NEWS.md` is a user-facing record of change, in contrast to, e.g., commit messages, which are developer-facing.\n\n-   If an item is related to an issue in GitHub, include the issue number in parentheses, e.g. `(#​10)`.\n    If an item is related to a pull request, include the pull request number and the author, e.g. `(#​101, @hadley)`.\n    This helps an interested reader to find relevant context on GitHub and, in your pkgdown site, these issue and pull request numbers and usernames will be hyperlinks.\n    We generally omit the username if the contributor is already recorded in `DESCRIPTION`.\n\n[^other-markdown-2]: pkgdown supports a few other wording choices for these headings, see more at <https://pkgdown.r-lib.org/reference/build_news.html>.\n\nThe main challenge with `NEWS.md` is getting into the habit of noting any user-visible change when you make it.\nIt's especially easy to forget this when accepting external contributions.\nBefore release, it can be useful to use your version control tooling to compare the source of the release candidate to the previous release.\nThis often surfaces missing `NEWS` items.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["plausible.html"],"output-file":"other-markdown.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","bibliography":["book.bib"],"editor":"visual","theme":["cosmo","custom.scss"]},"extensions":{"book":{"multiFile":true}}}}}