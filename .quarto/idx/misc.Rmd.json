{"title":"Other components","markdown":{"headingText":"Other components","headingAttr":{"id":"sec-misc","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, echo = FALSE}\nsource(\"common.R\")\n```\n\nThe first two chapters in this part of the book cover the two most obvious things that people distribute via an R package: functions (@sec-r) and data (@sec-data).\nBut that's not all it takes to make an R package.\nThere are other package components that are either required, such as a `DESCRIPTION` file, or highly recommended, such as tests and documentation.\n\nThe next few parts of the book are organized around important concepts: dependencies, testing, and documentation.\nBut before we dig in to those topics, this chapter demystifies some package parts that are not needed in every package, but that are nice to be aware of.\n\n## Other directories\n\nHere are some top-level directories you might encounter in an R source package, in rough order of importance and frequency of use:\n\n-   `src/`: source and header files for compiled code, most often C and C++.\n    This is an important technique that is used to make R packages more performant and to unlock the power of external libraries for R users.\n    As of the second edition, the book no longer covers this topic, since a truly useful treatment of compiled code requires more space than we can give it here.\n    The tidyverse generally uses the [cpp11 package](https://cpp11.r-lib.org) to connect C++ to R; most other packages use [Rcpp](https://www.rcpp.org), the most well-established package for integrating R and C++.\n\n-   `inst/`: for arbitrary additional files that you want include in your package.\n    This includes a few special files, like the `CITATION`, described below in @sec-misc-inst.\n    Other examples of files that might appear below `inst/` include R Markdown templates (see `usethis::use_rmarkdown_template()`) or [RStudio add-ins](https://docs.posit.co/ide/user/ide/guide/productivity/add-ins.html).\n\n-   `tools/`: auxiliary files needed during configuration, usually found in the company of a `configure` script.\n    We discuss this more below in @sec-misc-tools.\n\n-   `demo/`: for package demos.\n    We regard demos as a legacy phenomenon, whose goals are now better met by vignettes (@sec-vignettes).\n    For actively maintained packages, it probably makes sense to repurpose the content in any existing demos somewhere that's more visible, e.g. in `README.Rmd` (@sec-readme) or in vignettes (@sec-vignettes).\n    These other locations offer other advantages, such as making sure that the code is exercised regularly.\n    This is not true of actual demos, leaving them vulnerable to rot.\n\n-   `exec/`: for executable scripts.\n    Unlike files placed in other directories, files in `exec/` are automatically flagged as executable.\n    Empirically, to the extent that R packages are shipping scripts for external interpreters, the `inst/` directory seems to be preferred location these days.\n\n-   `po/`: translations for messages.\n    This is useful, but beyond the scope of this book.\n    See the [Internationalization](https://cran.rstudio.com/doc/manuals/r-devel/R-exts.html#Internationalization) chapter of \"Writing R extensions\" and the [potools package](https://michaelchirico.github.io/potools/index.html) for more details.\n\n## Installed files {#sec-misc-inst}\n\nWhen a package is installed, everything in `inst/` is copied into the top-level directory of the installed package (see @fig-package-files). In some sense `inst/` is the opposite of `.Rbuildignore` - where `.Rbuildignore` lets you remove arbitrary files and directories from the built package, `inst/` lets you add them.\n\n::: callout-warning\nYou are free to put anything you like in `inst/` with one caution: because `inst/` is copied into the top-level directory, don't create a subdirectory that collides with any of the directories that make up the official structure of an R package.\nWe recommend avoiding directories with special significance in either the source or installed form of a package, such as: `inst/data`, `inst/help`, `inst/html`, `inst/libs`, `inst/man`, `inst/Meta`, `inst/R`, `inst/src`, `inst/tests`, `inst/tools`, and `inst/vignettes`.\nIn most cases, this prevents you from having a malformed package.\nAnd even though some of the above directories are technically allowed, they can be an unnecessary source of confusion.\n:::\n\nHere are some of the most common files and folders found in `inst/`:\n\n-   `inst/CITATION`: how to cite the package, see below for details.\n\n-   `inst/extdata`: additional external data for examples and vignettes.\n    See section @sec-data-extdata for more detail.\n\nWhat if you need a path to the file at `inst/foo` to use in, e.g., the code below `R/` or in your documentation?\nThe default solution is to use `system.file(\"foo\", package = \"yourpackage\")`.\nBut this presents a workflow dilemma: When you're developing your package, you engage with it in its source form (`inst/foo`), but your users engage with its installed form (`/foo`).\nHappily, devtools provides a shim for `system.file()` that is activated by `load_all()`.\nSection @sec-data-system-file covers this in more depth and includes an interesting alternative, `fs::path_package()` .\n\n### Package citation {#sec-misc-inst-citation}\n\nThe `CITATION` file lives in the `inst` directory and is intimately connected to the `citation()` function which tells you how to cite R and R packages.\nCalling `citation()` without any arguments tells you how to cite base R:\n\n```{r}\ncitation()\n```\n\nCalling it with a package name tells you how to cite that package:\n\n```{r}\ncitation(\"tidyverse\")\n```\n\nThe associated `inst/CITATION` file looks like this:\n\n```{r, echo = FALSE, comment = \"\"}\ncitation <- readLines(system.file(\"CITATION\", package = \"tidyverse\"))\ncat(citation, sep = \"\\n\")\n```\n\nYou can call `usethis::use_citation()` to initiate this file and fill in your details.\nRead the `?bibentry` help topic for more details.\n\n## Configuration tools {#sec-misc-tools}\n\nIf a package has a configuration script (`configure` on Unix-alikes, `configure.win` on Windows), it is executed as the first step by `R CMD  INSTALL`. This is typically associated with a package that has a `src/` subdirectory containing C/C++ code and the `configure` script is needed at compile time.\nIf that script needs auxiliary files, those should be located in the `tools/` directory.\nThe scripts below `tools/` can have an effect on the installed package, but the contents of `tools/` will not ultimately be present in the installed package.\nIn any case, this is mostly (but not solely) relevant to packages with compiled code, which is beyond the scope of this book.\n\nWe bring this up because, in practice, some packages use the `tools/` directory for a different but related purpose.\nSome packages have periodic maintenance tasks for which it is helpful to record detailed instructions.\nFor example, many packages embed some sort of external resource, e.g. code or data:\n\n-   Source code and headers for an embedded third party C/C++ library.\n\n-   Web toolkits.\n\n-   R code that's inlined (as opposed to imported).\n\n-   Specification for a web API.\n\n-   Colour palettes, styles, and themes.\n\nThese external assets are also usually evolving over time, so they need to be re-ingested on a regular basis.\nThis makes it particularly rewarding to implement such housekeeping programmatically.\n\nThis is the second, unofficial use of the `tools/` directory, characterized by two big differences with its official purpose: The packages that do this generally do not have a `configure` script and they list `tools/` in `.Rbuildignore`, meaning that these scripts are not included in the package bundle.\nThese scripts are maintained in the source package for developer convenience, but are never shipped with the package.\n\nThis practice is closely related to our recommendation to store the instructions for the creation of package data in `data-raw/` (section @sec-data-data-raw) and to record the method of construction for any test fixtures (section @sec-testing-advanced-concrete-fixture).\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["plausible.html"],"output-file":"misc.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","bibliography":["book.bib"],"editor":"source","mainfont":"Microsoft Yahei","theme":["cosmo","custom.scss"]},"extensions":{"book":{"multiFile":true}}}}}