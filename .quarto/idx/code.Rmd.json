{"title":"R code","markdown":{"headingText":"R code","headingAttr":{"id":"sec-r","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, echo = FALSE}\nsource(\"common.R\")\n```\n\nThe first principle of making a package is that all R code goes in the `R/` directory.\nIn this chapter, you'll learn about organising your functions into files, maintaining a consistent style, and recognizing the stricter requirements for functions in a package (versus in a script).\nWe'll also remind you of the fundamental workflows for test-driving and formally checking an in-development package: `load_all()`, `test()`, and `check()`.\n\n## Organise functions into files {#sec-code-organising}\n\nThe only hard rule is that your package must store its function definitions in R scripts, i.e. files with extension `.R`, that live in the `R/` directory[^code-1].\nHowever, a few more conventions can make the source code of your package easier to navigate and relieve you of re-answering \"How should I name this?\" each time you create a new file.\nThe Tidyverse Style Guide offers some [general advice about file names](https://style.tidyverse.org/files.html) and also [advice that specifically applies to files in a package](https://style.tidyverse.org/package-files.html).\nWe expand on this here.\n\n[^code-1]: Unfortunately you can't use subdirectories inside `R/`.\n    The next best thing is to use a common prefix, e.g., `abc-*.R`, to signal that a group of files are related.\n\nThe file name should be meaningful and convey which functions are defined within.\nWhile you're free to arrange functions into files as you wish, the two extremes are bad: don't put all functions into one file and don't put each function into its own separate file.\nThis advice should inform your general policy, but there are exceptions to every rule.\nIf a specific function is very large or has lots of documentation, it can make sense to give it its own file, named after the function.\nMore often, a single `.R` file will contain multiple function definitions: such as a main function and its supporting helpers, a family of related functions, or some combination of the two.\n\n@tbl-putting-functions-in-files presents some examples from the actual source of the [tidyr package](http://tidyr.tidyverse.org/) at version 1.1.2.\nThere are some departures from the hard-and-fast rules given above, which illustrates that there's a lot of room for judgment here.\n\n```{r include = FALSE}\nlibrary(tidyverse)\n\ntidyr_separate <- tibble(\n  `Organising principle` = \"Main function plus helpers\",\n  `Source file` = \"[tidyr/R/separate.R](https://github.com/tidyverse/tidyr/blob/v1.1.2/R/separate.R)\",\n  Comments = \"Defines the user-facing `separate()` (an S3 generic), a `data.frame` method, and private helpers\"\n)\n\ntidyr_rectangle <- tibble(\n  `Organising principle` = \"Family of functions\",\n  `Source file` = \"[tidyr/R/rectangle.R](https://github.com/tidyverse/tidyr/blob/v1.1.2/R/rectangle.R)\",\n  Comments = \"Defines a family of functions for \\\"rectangling\\\" nested lists (`hoist()` and the `unnest()` functions), all documented together in a big help topic, plus private helpers\"\n)\n\ntidyr_uncount <- tibble(\n  `Organising principle` = \"One function\",\n  `Source file` = \"[tidyr/R/uncount.R](https://github.com/tidyverse/tidyr/blob/v1.1.2/R/uncount.R)\",\n  Comments = \"Defines exactly one function, `uncount()`, that's not particulary large, but doesn't fit naturally into any other `.R` file\"\n)\n \ndat <- bind_rows(tidyr_uncount, tidyr_separate, tidyr_rectangle)\n```\n\n```{r}\n#| echo: false\n#| label: tbl-putting-functions-in-files\n#| tbl-cap: Different ways to organize functions in files.\nknitr::kable(dat)\n```\n\n::: callout-tip\nAnother file you often see in the wild is `R/utils.R`.\nThis is a common place to define small utilities that are used inside multiple package functions.\nSince they serve as helpers to multiple functions, placing them in `R/utils.R` makes them easier to re-discover when you return to your package after a long break.\n\nBob Rudis assembled a collection of such files and did some analysis in the post [Dissecting R Package \"Utility Belts\"](https://rud.is/b/2018/04/08/dissecting-r-package-utility-belts/).\n:::\n\nIf it's very hard to predict which file a function lives in, that suggests it's time to separate your functions into more files or reconsider how you are naming your functions and/or files.\n\n::: callout-tip\n## RStudio\n\nThe organisation of functions within files is less important in RStudio, which offers two ways to jump to the definition of a function:\n\n-   Press Ctrl + `.` (the period) to bring up the *Go to File/Function* tool, as shown in @fig-go-to-file-function, then start typing the name.\n    Keep typing to narrow the list and eventually pick a function (or file) to visit.\n    This works for both functions and files in your project.\n\n    ```{r}\n    #| label: fig-go-to-file-function\n    #| out-width: ~\n    #| echo: false\n    #| fig-cap: >\n    #|   Go to File/Function in RStudio.\n    #| fig-alt: >\n    #|   Screenshot of the \"Go to File/Function\" tool in the\n    #|   RStudio IDE. It is a text box with the cursor in it.\n    knitr::include_graphics(\"images/file-finder.png\", dpi = 220)\n    ```\n\n-   With your cursor in a function name or with a function name selected, press F2.\n    This works for functions defined in your package or in another package.\n\nAfter navigating to a function with one of these methods, return to where you started by clicking the back arrow at the top-left of the editor (![](images/arrows.png){width=\"33\" height=\"16\"}) or by pressing Ctrl + F9 (Windows & Linux) or Cmd + F9 (macOS).\n:::\n\n## Fast feedback via `load_all()` {#sec-code-load-all}\n\nAs you add or modify functions defined in files below `R/`, you will naturally want to try them out.\nWe want to reiterate our strong recommendation to use `devtools::load_all()` to make them available for interactive exploration instead of, for example, `source()`ing files below `R/`.\nThe main coverage of `load_all()` is in @sec-workflow101-load-all and `load_all()` also shows up as one of the natural development tasks in @sec-whole-game-load-all.\nThe importance of `load_all()` in the testthat workflow is explained in @sec-testing-design-tension.\nCompared to the alternatives, `load_all()` helps you to iterate more quickly and provides an excellent approximation to the namespace regime of an installed package.\n\n## Code style\n\nWe recommend following the tidyverse style guide (<https://style.tidyverse.org>), which goes into much more detail than we can here.\nIts format also allows it to be a more dynamic document than this book.\n\nAlthough the style guide explains the \"what\" and the \"why\", another important decision is *how* to enforce a specific code style.\nFor this we recommend the styler package (<https://styler.r-lib.org>); its default behaviour enforces the tidyverse style guide.\nThere are many ways to apply styler to your code, depending on the context:\n\n-   `styler::style_pkg()` restyles an entire R package.\n-   `styler::style_dir()` restyles all files in a directory.\n-   `usethis::use_tidy_style()` is wrapper that applies one of the above functions depending on whether the current project is an R package or not.\n-   `styler::style_file()` restyles a single file.\n-   `styler::style_text()` restyles a character vector.\n\n::: callout-tip\n## RStudio\n\nWhen styler is installed, the RStudio Addins menu will offer several additional ways to style code:\n\n-   the active selection\n-   the active file\n-   the active package\n:::\n\n::: callout-warning\nIf you don't use Git or another version control system, applying a function like `styler::style_pkg()` is nerve-wracking and somewhat dangerous, because you lack a way to see exactly what changed and to accept/reject such changes in a granular way.\n:::\n\nThe styler package can also be integrated with various platforms for hosting source code and doing continuous integration.\nFor example, the tidyverse packages use a GitHub Action that restyles a package when triggered by a special comment (`/style`) on a pull request.\nThis allows maintainers to focus on reviewing the substance of the pull request, without having to nitpick small issues of whitespace or indentation[^code-2][^code-3]\n.\n\n[^code-2]: See the [Commands workflow](https://github.com/r-lib/actions/tree/master/examples#commands-workflow) in the [GitHub Actions for the R language](https://github.com/r-lib/actions) repository.\n\n[^code-3]: The [Robot Pedantry, Human Empathy](https://mikemcquaid.com/2018/06/05/robot-pedantry-human-empathy/) blog post by Mike McQuaid does an excellent job summarizing the benefit of automating tasks like code re-styling.\n\n## Understand when code is executed {#sec-code-when-executed}\n\nUp until now, you've probably been writing **scripts**, R code saved in a file that you execute interactively, perhaps using an IDE and/or `source()`, or noninteractively via `Rscript`.\nThere are two main differences between code in scripts and packages:\n\n-   In a script, code is run ... when you run it!\n    The awkwardness of this statement reflects that it's hard to even think about this issue with a script.\n    However, we must, in order to appreciate that the code in a package is run **when the package is built**.\n    This has big implications for how you write the code below `R/`: package code should only create objects, the vast majority of which will be functions.\n\n-   Functions in your package will be used in situations that you didn't imagine.\n    This means your functions need to be thoughtful in the way that they interact with the outside world.\n\nWe expand on the first point here and the second in the next section.\nThese topics are also illustrated concretely in @sec-package-within-build-time-run-time.\n\nWhen you `source()` a script, every line of code is executed and the results are immediately made available.\nThings are different with package code, because it is loaded in two steps.\nWhen the binary package is built (often, by CRAN) all the code in `R/` is executed and the results are saved.\nWhen you attach a package with `library()`, these cached results are re-loaded and certain objects (mostly functions) are made available for your use.\nThe full details on what it means for a package to be in binary form are given in @sec-structure-binary.\nWe refer to the creation of the binary package as (binary) \"build time\" and, specifically, we mean when `R CMD INSTALL --build` is run.\n(You might think that this is what `R CMD build` does, but that actually makes a bundled package, a.k.a. a \"source tarball\".) For macOS and Windows users of CRAN packages, build time is whenever CRAN built the binary package for their OS.\nFor those who install packages from source, build time is essentially when they (built and) installed the package.\n\nConsider the assignment `x <- Sys.time()`.\nIf you put this in a script, `x` tells you when the script was `source()`d.\nBut if you put that same code at the top-level in a package, `x` tells you when the package binary was *built*.\nIn @sec-package-within-build-time-run-time, we show a complete example of this in the context of forming timestamps inside a package.\n\nThe main takeaway is this:\n\n> Any R code outside of a function is suspicious and should be carefully reviewed.\n\nWe explore a few real-world examples below that show how easy it is to get burned by this \"build time vs. load time\" issue.\nLuckily, once you diagnose this problem, it is generally not difficult to fix.\n\n### Example: A path returned by `system.file()`\n\nThe shinybootstrap2 package once had this code below `R/`:\n\n```{r eval = FALSE}\ndataTableDependency <- list(\n  htmlDependency(\n    \"datatables\", \"1.10.2\",\n    c(file = system.file(\"www/datatables\", package = \"shinybootstrap2\")),\n    script = \"js/jquery.dataTables.min.js\"\n  ),\n  htmlDependency(\n    \"datatables-bootstrap\", \"1.10.2\",\n    c(file = system.file(\"www/datatables\", package = \"shinybootstrap2\")),\n    stylesheet = c(\"css/dataTables.bootstrap.css\", \"css/dataTables.extra.css\"),\n    script = \"js/dataTables.bootstrap.js\"\n  )\n)\n```\n\nSo `dataTableDependency` was a list object defined in top-level package code and its value was constructed from paths obtained via `system.file()`.\nAs described in [a GitHub issue](https://github.com/rstudio/htmltools/issues/22),\n\n> This works fine when the package is built and tested on the same machine.\n> However, if the package is built on one machine and then used on another (as is the case with CRAN binary packages), then this will fail -- the dependency will point to the wrong directory on the host.\n\nThe heart of the solution is to make sure that `system.file()` is called from a function, at run time.\nIndeed, this fix was made here (in commit [138db47](https://github.com/rstudio/shinybootstrap2/commit/138db47e6bef195f14f6a14f4289ca445e9b2efa#diff-fedcc5cc99f3d44a4caf06f8e6e0ae08)) and in a few other packages that had similar code and a related check was added in `htmlDependency()` itself.\nThis particular problem would now be caught by `R CMD check`, due to changes that came with [staged installation](https://developer.r-project.org/Blog/public/2019/02/14/staged-install/index.html) as of R 3.6.0.\n\n### Example: Available colours\n\nThe crayon package has a function, `crayon::show_ansi_colors()`, that displays an ANSI colour table on your screen, basically to show what sort of styling is possible.\nIn an early version, the function looked something like this:\n\n```{r eval = FALSE}\nshow_ansi_colors <- function(colors = num_colors()) {\n  if (colors < 8) {\n    cat(\"Colors are not supported\")\n  } else if (colors < 256) {\n    cat(ansi_colors_8, sep = \"\")\n    invisible(ansi_colors_8)\n  } else {\n    cat(ansi_colors_256, sep = \"\")\n    invisible(ansi_colors_256)\n  }\n}\n\nansi_colors_8 <- # code to generate a vector covering basic terminal colors\n  \nansi_colors_256 <- # code to generate a vector covering 256 colors\n```\n\nwhere `ansi_colors_8` and `ansi_colors_256` were character vectors exploring a certain set of colours, presumably styled via ANSI escapes.\n\nThe problem was those objects were formed and cached when the binary package was built.\nSince that often happens on a headless server, this likely happens under conditions where terminal colours might not be enabled or even available.\nUsers of the installed package could still call `show_ansi_colors()` and `num_colors()` would detect the number of colours supported by their system (256 on most modern computers).\nBut then an un-coloured object would print to screen (the original GitHub issue is [r-lib/crayon#37](https://github.com/r-lib/crayon/issues/37)).\n\nThe solution was to compute the display objects with a function at run time (in commit [e2b368a](https://github.com/r-lib/crayon/commit/e2b368ac27331d82154f85299f18efbc36227caa):\n\n```{r}\nshow_ansi_colors <- function(colors = num_colors()) {\n  if (colors < 8) {\n    cat(\"Colors are not supported\")\n  } else if (colors < 256) {\n    cat(ansi_colors_8(), sep = \"\")\n    invisible(ansi_colors_8())\n  } else {\n    cat(ansi_colors_256(), sep = \"\")\n    invisible(ansi_colors_256())\n  }\n}\n\nansi_colors_8 <- function() {\n  # code to generate a vector covering basic terminal colors\n}\n  \nansi_colors_256 <- function() {\n  # code to generate a vector covering 256 colors\n}\n```\n\nLiterally, the same code is used, it is simply pushed down into the body of a function taking no arguments (similar to the shinybootstrap2 example).\nEach reference to, e.g., the `ansi_colors_8` object is replaced by a call to the `ansi_colors_8()` function.\n\nThe main takeaway is that functions that assess or expose the capabilities of your package on a user's system must fully execute on your user's system.\nIt's fairly easy to accidentally rely on results that were cached at build time, quite possibly on a different machine.\n\n### Example: Aliasing a function\n\nOne last example shows that, even if you are careful to only define functions below `R/`, there are still some subtleties to consider.\nImagine that you want the function `foo()` in your package to basically be an alias for the function `blah()` from some other package, e.g. pkgB.\nYou might be tempted to do this:\n\n```{r eval = FALSE}\nfoo <- pkgB::blah\n```\n\nHowever, this will cause `foo()` in your package to reflect the definition of `pkgB::blah()` at the version present on the machine where the binary package is built (often CRAN), at that moment in time.\nIf a bug is discovered in `pkgB::blah()` and subsequently fixed, your package will still use the older, buggy version, until your package is rebuilt (often by CRAN) and your users upgrade, which is completely out of your control.\nThis alternative approach protects you from this:\n\n```{r}\nfoo <- function(...) pkgB::blah(...)\n```\n\nNow, when your user calls `foo()`, they are effectively calling `pkgB::blah()`, at the version installed on *their* machine at that very moment.\n\nA real example of this affected an older version of knitr, related to how the default \"evaluate\" hook was being set to `evaluate::evaluate()` (original issue is [yihui/knitr#1441](https://github.com/yihui/knitr/issues/1441), resolved in commit [d6b53e0](https://github.com/yihui/knitr/commit/d6b53e0f15a8afd1de4987a86931ba54f886278d)).\n\n## Respect the R landscape {#sec-code-r-landscape}\n\nAnother big difference between a script and a package is that other people are going to use your package, and they're going to use it in situations that you never imagined.\nThis means you need to pay attention to the R landscape, which includes not just the available functions and objects, but all the global settings.\n\nYou have changed the R landscape if you've loaded a package with `library()`, or changed a global option with `options()`, or modified the working directory with `setwd()`.\nIf the behaviour of *other* functions differs before and after running your function, you've modified the landscape.\n@sec-package-within-side-effects has a concrete example of this involving time zones and the locale-specific printing of datetimes.\nChanging the landscape is bad because it makes code much harder to understand.\n\nThere are some functions that modify global settings that you should never use because there are better alternatives:\n\n-   **Don't use `library()` or `require()`**.\n    These modify the search path, affecting what functions are available from the global environment.\n    Instead, you should use the `DESCRIPTION` to specify your package's requirements, as described in @sec-description.\n    This also makes sure those packages are installed when your package is installed.\n\n-   **Never use `source()`** to load code from a file.\n    `source()` modifies the current environment, inserting the results of executing the code.\n    There is no reason to use `source()` inside your package, i.e. in a file below `R/`.\n    Sometimes people `source()` files below `R/` during package development, but as we've explained in @sec-workflow101-load-all and @sec-code-load-all, `load_all()` is a much better way to load your current code for exploration.\n    If you're using `source()` to create a dataset, it is better to use the methods in @sec-data for including data in a package.\n\nHere is a non-exhaustive list of other functions that should be used with caution:\n\n-   `options()`\n-   `par()`\n-   `setwd()`\n-   `Sys.setenv()`\n-   `Sys.setlocale()`\n-   `set.seed()` (or anything that changes the state of the random number generator)\n\n<!-- TODO: maybe tell one or more of the scary stories in <https://github.com/hadley/r-pkgs/issues/447> -->\n\nIf you must use them, make sure to clean up after yourself.\nBelow we show how to do this using functions from the withr package and in base R.\n\nThe flip side of this coin is that you should avoid relying on the user's landscape, which might be different to yours.\nFor example, functions that rely on sorting strings are dangerous, because sort order depends on the system locale.\nBelow we see that locales one might actually encounter in practice (C, English, French, etc.) differ in how they sort non-ASCII strings or uppercase versus lowercase letters.\n\n```{r}\nx <- c(\"bernard\", \"bérénice\", \"béatrice\", \"boris\")\n\nwithr::with_locale(c(LC_COLLATE = \"fr_FR\"), sort(x))\nwithr::with_locale(c(LC_COLLATE = \"C\"), sort(x))\n\nx <- c(\"a\", \"A\", \"B\", \"b\", \"A\", \"b\")\n\nwithr::with_locale(c(LC_COLLATE = \"en_CA\"), sort(x))\nwithr::with_locale(c(LC_COLLATE = \"C\"), sort(x))\n```\n\nIf you write your functions as if all users have the same system locale as you, your code might fail.\n\n### Manage state with withr\n\nIf you need to modify the R landscape inside a function, then it is important to ensure your change is reversed *on exit* of that function.\nThis is exactly what `base::on.exit()` is designed to do.\nYou use `on.exit()` inside a function to register code to run later, that restores the landscape to its original state.\nIt is important to note that proper tools, such as `on.exit()`, work even if we exit the function abnormally, i.e. due to an error.\nThis is why it's worth using the official methods described here over any do-it-yourself solution.\n\nWe usually manage state using the [withr package](https://withr.r-lib.org), which provides a flexible, `on.exit()`-like toolkit (`on.exit()` itself is covered in the next section).\n`withr::defer()` can be used as a drop-in replacement for `on.exit()`.\nWhy do we like withr so much?\nFirst, it offers many pre-built convenience functions for state changes that come up often.\nWe also appreciate withr's default stack-like behaviour (LIFO = last in, first out), its usability in interactive sessions, and its `envir` argument (in more advanced usage).\n\nThe general pattern is to capture the original state, schedule its eventual restoration \"on exit\", then make the state change.\nSome setters, such as `options()` or `par()`, return the old value when you provide a new value, leading to usage that looks like this:\n\n```{r, eval = FALSE}\nf <- function(x, y, z) {\n  ...                        # width option \"as found\"\n  old <- options(width = 20) # width option is 20\n  defer(options(old))        # width option is 20\n  ...                        # width option is 20\n}                            # original width option restored\n```\n\nCertain state changes, such as modifying session options, come up so often that withr offers pre-made helpers.\n@tbl-withr-greatest-hits shows a few of the state change helpers in withr that you are most likely to find useful:\n\n| Do / undo this              | withr functions                     |\n|-----------------------------|-------------------------------------|\n| Set an R option             | `with_options()`, `local_options()` |\n| Set an environment variable | `with_envvar()`, `local_envvar()`   |\n| Change working directory    | `with_dir()`, `local_dir()`         |\n| Set a graphics parameter    | `with_par()`, `local_par()`         |\n\n: Selected functions from withr. {#tbl-withr-greatest-hits}\n\nYou'll notice each helper comes in two forms that are useful in different situations:\n\n-   `with_*()` functions are best for executing small snippets of code with a temporarily modified state.\n    (These functions are inspired by how `base::with()` works.)\n\n    ```{r eval = FALSE}\n    f <- function(x, sig_digits) {\n      # imagine lots of code here\n      withr::with_options(\n        list(digits = sig_digits),\n        print(x)\n      )\n      # ... and a lot more code here\n    }\n    ```\n\n-   `local_*()` functions are best for modifying state \"from now until the function exits\".\n\n    ```{r eval = FALSE}\n    g <- function(x, sig_digits) {\n      withr::local_options(list(digits = sig_digits))\n      print(x)\n      # imagine lots of code here\n    }\n    ```\n\nDeveloping code interactively with withr is pleasant, because deferred actions can be scheduled even on the global environment.\nThose cleanup actions can then be executed with `withr::deferred_run()` or cleared without execution with `withr::deferred_clear()`.\nWithout this feature, it can be tricky to experiment with code that needs cleanup \"on exit\", because it behaves so differently when executed in the console versus at arm's length inside a function.\n\nMore in-depth coverage is given in the withr vignette [Changing and restoring state](https://withr.r-lib.org/articles/changing-and-restoring-state.html) and withr will also prove useful when we talk about testing in @sec-testing-basics.\n\n### Restore state with `base::on.exit()`\n\nHere is how the general \"save, schedule restoration, change\" pattern looks when using `base::on.exit()`.\n\n```{r, eval = FALSE}\nf <- function(x, y, z) {\n  ...\n  old <- options(mfrow = c(2, 2), pty = \"s\")\n  on.exit(options(old), add = TRUE)\n  ...\n}\n```\n\nOther state changes aren't available with that sort of setter and you must implement it yourself.\n\n```{r, eval = FALSE}\ng <- function(a, b, c) {\n  ...\n  scratch_file <- tempfile()\n  on.exit(unlink(scratch_file), add = TRUE)\n  file.create(scratch_file)\n  ...\n}\n```\n\nNote that we specify `on.exit(..., add = TRUE)`, because you almost always want this behaviour, i.e. to *add* to the list of deferred cleanup tasks rather than to *replace* them entirely.\nThis (and the default value of `after`) are related to our preference for `withr::defer()`, when we're willing to take a dependency on withr.\nThese issues are explored in a [withr vignette](https://withr.r-lib.org/articles/changing-and-restoring-state.html).\n\n### Isolate side effects\n\nCreating plots and printing output to the console are two other ways of affecting the global R environment.\nOften you can't avoid these (because they're important!) but it's good practice to isolate them in functions that **only** produce output.\nThis also makes it easier for other people to repurpose your work for new uses.\nFor example, if you separate data preparation and plotting into two functions, others can use your data prep work (which is often the hardest part!) to create new visualisations.\n\n### When you **do** need side-effects {#sec-code-onLoad-onAttach}\n\nOccasionally, packages do need side-effects.\nThis is most common if your package talks to an external system --- you might need to do some initial setup when the package loads.\nTo do that, you can use two special functions: `.onLoad()` and `.onAttach()`.\nThese are called when the package is loaded and attached.\nYou'll learn about the distinction between the two in @sec-dependencies-attach-vs-load.\nFor now, you should always use `.onLoad()` unless explicitly directed otherwise.\n\nSome common uses of `.onLoad()` and `.onAttach()` are:\n\n-   To set custom options for your package with `options()`.\n    To avoid conflicts with other packages, ensure that you prefix option names with the name of your package.\n    Also be careful not to override options that the user has already set.\n    Here's a (highly redacted) version of dplyr's `.onLoad()` function which sets an option that controls progress reporting:\n\n    ```{r, eval = FALSE}\n    .onLoad <- function(libname, pkgname) {\n      op <- options()\n      op.dplyr <- list(\n        dplyr.show_progress = TRUE\n      )\n      toset <- !(names(op.dplyr) %in% names(op))\n      if (any(toset)) options(op.dplyr[toset])\n      \n      invisible()\n    }\n    ```\n\n    This allows functions in dplyr to use `getOption(\"dplyr.show_progress\")` to determine whether to show progress bars, relying on the fact that a sensible default value has already been set.\n\n<!-- TODO: I don't think the option setting example is so great anymore. I lean towards replacement. Other possible examples of `.onLoad()` usage: Register S3 methods. Detect capabilities of the system or of other packages. -->\n\n-   To display an informative message when the package is attached.\n    This might make usage conditions clear or display package capabilities based on current system conditions.\n    Startup messages are one place where you should use `.onAttach()` instead of `.onLoad()`.\n    To display startup messages, always use `packageStartupMessage()`, and not `message()`.\n    (This allows `suppressPackageStartupMessages()` to selectively suppress package startup messages).\n\n    ```{r, eval = FALSE}\n    .onAttach <- function(libname, pkgname) {\n      packageStartupMessage(\"Welcome to my package\")\n    }\n    ```\n\nAs you can see in the examples, `.onLoad()` and `.onAttach()` are called with two arguments: `libname` and `pkgname`.\nThey're rarely used (they're a holdover from the days when you needed to use `library.dynam()` to load compiled code).\nThey give the path where the package is installed (the \"library\"), and the name of the package.\n\nIf you use `.onLoad()`, consider using `.onUnload()` to clean up any side effects.\nBy convention, `.onLoad()` and friends are usually saved in a file called `R/zzz.R`.\n(Note that `.First.lib()` and `.Last.lib()` are old versions of `.onLoad()` and `.onUnload()` and should no longer be used.)\n\nOne especially hairy thing to do in a function like `.onLoad()` or `.onAttach()` is to change the state of the random number generator.\nOnce upon a time, ggplot2 used `sample()` when deciding whether to show a startup message, but only in interactive sessions.\nThis, in turn, created a reproducibility puzzle for users who were using `set.seed()` for their own purposes, prior to attaching ggplot2 with `library(ggplot2)`, and running the code both interactively and noninteractively.\nThe chosen solution was to wrap the offending startup code inside `withr::with_preserve_seed()`, which leaves the user's random seed as it found it.\n\n## Constant health checks\n\nHere is a typical sequence of calls when using devtools for package development:\n\n1.  Edit one or more files below `R/`.\n2.  `document()` (if you've made any changes that impact help files or NAMESPACE)\n3.  `load_all()`\n4.  Run some examples interactively.\n5.  `test()` (or `test_active_file()`)\n6.  `check()`\n\nAn interesting question is how frequently and rapidly you move through this development cycle.\nWe often find ourselves running through the above sequence several times in an hour or in a day while adding or modifying a single function.\n\nThose newer to package development might be most comfortable slinging R code and much less comfortable writing and compiling documentation, simulating package build & installation, testing, and running `R CMD check`.\nAnd it is human nature to embrace the familiar and postpone the unfamiliar.\nThis often leads to a dysfunctional workflow where the full sequence above unfolds infrequently, maybe once per month or every couple of months, very slowly and often with great pain:\n\n1.  Edit one or more files below `R/`.\n2.  Build, install, and use the package. Iterate occasionally with previous step.\n3.  Write documentation (once the code is \"done\").\n4.  Write tests (once the code is \"done\").\n5.  Run `R CMD check` right before submitting to CRAN or releasing in some other way.\n\nWe've already talked about the value of fast feedback, in the context of `load_all()`.\nBut this also applies to running `document()`, `test()`, and `check()`.\nThere are defects you just can't detect from using `load_all()` and running a few interactive examples that are immediately revealed by more formal checks.\nFinding and fixing 5 bugs, one at a time, right after you created each one is much easier than troubleshooting all 5 at once (possibly interacting with each other), weeks or months after you last touched the code.\n\n::: callout-warning\n## Submitting to CRAN\n\nIf you're planning on submitting your package to CRAN, you must use only ASCII characters in your `.R` files.\nIn practice, this means you are limited to the digits 0 to 9, lowercase letters 'a' to 'z', uppercase letters 'A' to 'Z', and common punctuation.\n\nBut sometimes you need to inline a small bit of character data that includes, e.g., a Greek letter (µ), an accented character (ü), or a symbol (30°).\nYou can use any Unicode character as long as you specify it in the special Unicode escape `\"\\u1234\"` format.\nThe easiest way to find the correct code point is to use `stringi::stri_escape_unicode()`:\n\n```{r}\nx <- \"This is a bullet •\"\ny <- \"This is a bullet \\u2022\"\nidentical(x, y)\ncat(stringi::stri_escape_unicode(x))\n```\n\nSometimes you have the opposite problem.\nYou don't *intentionally* have any non-ASCII characters in your R code, but automated checks reveal that you do.\n\n```         \nW  checking R files for non-ASCII characters ...\n   Found the following file with non-ASCII characters:\n     foo.R\n   Portable packages must use only ASCII characters in their R code,\n   except perhaps in comments.\n   Use \\uxxxx escapes for other characters.\n```\n\nThe most common offenders are \"curly\" or \"smart\" single and double quotes that sneak in through copy/paste.\nThe functions `tools::showNonASCII()` and `tools::showNonASCIIfile(file)` help you find the offending file(s) and line(s).\n\n```{r eval = FALSE}\ntools::showNonASCIIfile(\"R/foo.R\")\n#> 666: #' If you<e2><80><99>ve copy/pasted quotes, watch out!\n```\n:::\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["plausible.html"],"output-file":"code.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","bibliography":["book.bib"],"editor":"visual","theme":["cosmo","custom.scss"]},"extensions":{"book":{"multiFile":true}}}}}