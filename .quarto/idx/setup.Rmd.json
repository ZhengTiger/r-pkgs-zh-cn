{"title":"System setup","markdown":{"headingText":"System setup","headingAttr":{"id":"sec-setup","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, echo = FALSE}\nsource(\"common.R\")\n```\n\n## Prepare your system {#setup-prep}\n\nTo get started, make sure you have the latest version of R (at least `r paste0(version$major, \".\", version$minor)`, which is the version being used to render this book), then run the following code to get the packages you'll need:\n\n```{r, eval = FALSE}\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))\n```\n\nMake sure you have a recent version of the RStudio integrated development environment (IDE).\nNew versions are released regularly, so we recommend updating often to get access to the latest and greatest features.\n\nDownload the current version of RStudio Desktop here: <https://posit.co/download/rstudio-desktop/>.\nMost readers can use the free, open source version of RStudio Desktop.\n\n## devtools, usethis, and you {#sec-setup-usage}\n\n> \"I am large, I contain multitudes.\"\n>\n> --- Walt Whitman, Song of Myself\n\nAs mentioned in @sec-intro-phil, devtools is a 'meta-package', encompassing and exposing functionality maintained in several smaller packages[^setup-1].\nFor example, devtools might provide a wrapper function in order to set user-friendly defaults, introduce helpful interactive behaviour, or to combine functionality from multiple sub-packages.\nIn some cases it simply re-exports a function from another package to make it easily available when devtools is attached.\n\n[^setup-1]: At the time of writing, devtools exposes functionality from [remotes](https://remotes.r-lib.org/), [pkgbuild](https://pkgbuild.r-lib.org/), [pkgload](https://pkgload.r-lib.org/), [rcmdcheck](https://rcmdcheck.r-lib.org/), [revdepcheck](https://revdepcheck.r-lib.org/), [sessioninfo](https://sessioninfo.r-lib.org/), [usethis](https://usethis.r-lib.org/), [testthat](https://testthat.r-lib.org), and [roxygen2](https://roxygen2.r-lib.org)\n\nWhat's our recommended approach to using devtools and its constituent packages?\nIt varies, depending on your intention:\n\n-   If you are using the functions interactively to help you develop your package, you should think of devtools as the provider of your favorite functions for package development. In this case you should attach devtools with `library(devtools)` and call the functions without qualification (e.g., `load_all()`).\n-   If you are using functions from devtools and friends within the package code you are writing, you should NOT depend on devtools, but should instead access functions via the package that is their primary home.\n    -   devtools should rarely appear in the role of `pkg` in a qualified call of the form `pkg::fcn()`. Instead, `pkg` should be the package where `fcn()` is defined. For example, if you are creating a function in your package in which you need to query the state of the user's R session, use `sessioninfo::session_info()` in your package instead of `devtools::session_info()`.\n-   If you find bugs, try to report them on the package that is a function's primary home. The help for `devtools::fcn()` usually states when devtools is re-exporting a function from another package.\n\nThe usethis package is the one constituent package that more people may be aware of and that they may use directly.\nIt holds the functions that act on the files and folders in an R project, most especially for any project that is also an R package.\ndevtools makes it easy to access usethis functions interactively, as when you call `library(devtools)`, usethis is also attached.\nThen you can use any function in usethis without qualification, e.g., just call `use_testthat()`.\nIf you choose to specify the namespace, such as when working in a more programmatic style, then make sure you qualify the call with usethis, e.g., `usethis::use_testthat()`.\n\n### Personal startup configuration\n\nYou can attach devtools like so:\n\n```{r, eval = FALSE}\nlibrary(devtools)\n```\n\nBut it soon grows aggravating to repeatedly attach devtools in every R session.\nTherefore, we strongly recommend attaching[^setup-2] devtools in your `.Rprofile` startup file, like so:\n\n[^setup-2]: This is one of the few cases where we recommend using `require()` over `library().` `library()` will fail with an error if it is unable to attach the package, and thus abort the execution of your `.Rprofile`.\n    If `require()` fails to attach the package it will emit a warning but will allow the remainder of your `.Rprofile` to execute.\n    This is discussed further in @sec-dependencies-attach-vs-load.\n\n```{r eval = FALSE}\nif (interactive()) {\n  suppressMessages(require(devtools))\n}\n```\n\nFor convenience, the function `use_devtools()` creates `.Rprofile`, if needed, opens it for editing, and puts the necessary lines of code on the clipboard and the screen.\n\n::: callout-warning\nIn general, it's a bad idea to attach packages in `.Rprofile`, as it invites you to create R scripts that don't reflect all of their dependencies via explicit calls to `library(foo)`.\nBut devtools is a workflow package that smooths the process of package development and is, therefore, unlikely to get baked into any analysis scripts.\nNote how we still take care to only attach in interactive sessions.\n:::\n\nusethis consults certain options when, for example, creating R packages *de novo*.\nThis allows you to specify personal defaults for yourself as a package maintainer or for your preferred license.\nHere's an example of a code snippet that could go in `.Rprofile`:\n\n```{r, eval = FALSE}\noptions(\n  \"Authors@R\" = utils::person(\n    \"Jane\", \"Doe\",\n    email = \"jane@example.com\",\n    role = c(\"aut\", \"cre\"),\n    comment = c(ORCID = \"0000-1111-2222-3333\")\n  ),\n  License = \"MIT + file LICENSE\"\n)\n```\n\nThe following code shows how to install the development versions of devtools and usethis.\nAt times, this book may describe new features that are in the development version of devtools and related packages, but that haven't been released yet.\n\n```{r, eval = FALSE}\ndevtools::install_github(\"r-lib/devtools\")\ndevtools::install_github(\"r-lib/usethis\")\n\n# or, alternatively\npak::pak(\"r-lib/devtools\")\npak::pak(\"r-lib/usethis\")\n```\n\n## R build toolchain {#setup-tools}\n\nTo be fully capable of building R packages from source, you'll also need a compiler and a few other command line tools.\nThis may not be strictly necessary until you want to build packages containing C or C++ code.\nEspecially if you are using RStudio, you can set this aside for now.\nThe IDE will alert you and provide support once you try to do something that requires you to setup your development environment.\nRead on for advice on doing this yourself.\n\n### Windows\n\nOn Windows the collection of tools needed for building packages from source is called Rtools.\n\nRtools is NOT an R package.\nIt is NOT installed with `install.packages()`.\nInstead, download it from <https://cran.r-project.org/bin/windows/Rtools/> and run the installer.\n\nDuring the Rtools installation you may see a window asking you to \"Select Additional Tasks\".\n\n-   Do *not* select the box for \"Edit the system PATH\". devtools and RStudio should put Rtools on the `PATH` automatically when it is needed.\n-   Do select the box for \"Save version information to registry\". It should be selected by default.\n\n### macOS\n\nYou need to install the Xcode command line tools, which requires that you [register as an Apple developer](https://developer.apple.com/programs/register/) (don't worry, it's free).\n\nThen, in the shell, do:\n\n``` shell\nxcode-select --install\n```\n\nAlternatively, you can install the current release of full [Xcode from the Mac App Store](https://itunes.apple.com/ca/app/xcode/id497799835?mt=12).\nThis includes a very great deal that you do not need, but it offers the advantage of App Store convenience.\n\n### Linux\n\nMake sure you've installed not only R, but also the R development tools.\nFor example, on Ubuntu (and Debian) you need to install the `r-base-dev` package with:\n\n```         \nsudo apt install r-base-dev\n```\n\nOn Fedora and RedHat, the development tools (called `R-core-devel`) will be installed automatically when you install with R with `sudo dnf install R`.\n\n## Verify system prep\n\nYou can request a \"(package) development situation report\" with `devtools::dev_sitrep()`:\n\n```{r, eval = FALSE}\ndevtools::dev_sitrep()\n#> ── R ───────────────────────────────────────────────────────────────────────\n#> • version: 4.1.2\n#> • path: '/Library/Frameworks/R.framework/Versions/4.1/Resources/'\n#> ── RStudio ─────────────────────────────────────────────────────────────────\n#> • version: 2022.2.0.443\n#> ── devtools ────────────────────────────────────────────────────────────────\n#> • version: 2.4.3.9000\n#> • devtools or its dependencies out of date:\n#>   'gitcreds', 'gh'\n#>   Update them with `devtools::update_packages(\"devtools\")`\n#> ── dev package ─────────────────────────────────────────────────────────────\n#> • package: 'rpkgs'\n#> • path: '/Users/jenny/rrr/r-pkgs/'\n#> • rpkgs dependencies out of date:\n#>   'gitcreds', 'generics', 'tidyselect', 'dplyr', 'tidyr', 'broom', 'gh'\n#>  Update them with `devtools::install_dev_deps()`\n```\n\nIf this reveals that certain tools or packages are missing or out-of-date, you are encouraged to update them.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["plausible.html"],"output-file":"setup.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","bibliography":["book.bib"],"editor":"visual","theme":["cosmo","custom.scss"]},"extensions":{"book":{"multiFile":true}}}}}