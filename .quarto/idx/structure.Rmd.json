{"title":"Package structure and state","markdown":{"headingText":"Package structure and state","headingAttr":{"id":"sec-package-structure-state","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, echo = FALSE}\nsource(\"common.R\")\n```\n\nThis chapter will start you on the road to package development by converting the implicit knowledge you've gained from *using* R packages into the explicit knowledge needed to *create and modify* them.\nYou'll learn about the various states a package can be in and the difference between a package and library (and why you should care).\n\n## Package states {#sec-package-states}\n\nWhen you create or modify a package, you work on its \"source code\" or \"source files\".\nYou interact with the in-development package in its **source** form.\nThis is NOT the package form you are most familiar with from day-to-day usage.\nPackage development workflows make much more sense if you understand the five states an R package can be in:\n\n-   source\n-   bundled\n-   binary\n-   installed\n-   in-memory\n\nYou already know some of the functions that put packages into these states.\nFor example, `install.packages()` can move a package from the source, bundled, or binary states into the installed state.\n`devtools::install_github()` takes a source package on GitHub and moves it into the installed state.\nThe `library()` function loads an installed package into memory, making it available for immediate and direct use.\n\n## Source package {#sec-source-package}\n\nA **source** package is just a directory of files with a specific structure.\nIt includes particular components, such as a `DESCRIPTION` file, an `R/` directory containing `.R` files, and so on.\nMost of the remaining chapters in this book are dedicated to detailing these components.\n\nIf you are new to package development, you may have never seen a package in source form!\nYou might not even have any source packages on your computer.\nThe easiest way to see a package in source form right away is to browse around its code on the web.\n\nMany R packages are developed in the open on GitHub (or GitLab or similar).\nThe best case scenario is that you visit the package's CRAN landing page, e.g.:\n\n-   forcats: <https://cran.r-project.org/package=forcats>\n-   readxl: <https://cran.r-project.org/package=readxl>\n\nand one of its URLs links to a repository on a public hosting service, e.g.:\n\n-   forcats: <https://github.com/tidyverse/forcats>\n-   readxl: <https://github.com/tidyverse/readxl>\n\nSome maintainers forget to list this URL, even though the package is developed in a public repository, but you still might be able to discover it via search.\n\nEven if a package is not developed on a public platform, you can visit its source in the [unofficial, read-only mirror maintained by R-hub](https://docs.r-hub.io/#cranatgh).\nExamples:\n\n-   MASS: <https://github.com/cran/MASS>\n-   car: <https://github.com/cran/car>\n\nNote that exploring a package's source and history within the `cran` GitHub organisation is not the same as exploring the package's true development venue, because this source and its evolution is just reverse-engineered from the package's CRAN releases.\nThis presents a redacted view of the package and its history, but, by definition, it includes everything that is essential.\n\n## Bundled package {#sec-bundled-package}\n\nA **bundled** package is a package that's been compressed into a single file.\nBy convention (from Linux), package bundles in R use the extension `.tar.gz` and are sometimes referred to as \"source tarballs\".\nThis means that multiple files have been reduced to a single file (`.tar`) and then compressed using gzip (`.gz`).\nWhile a bundle is not that useful on its own, it's a platform-agnostic, transportation-friendly intermediary between a source package and an installed package.\n\nIn the rare case that you need to make a bundle from a package you're developing locally, use `devtools::build()`.\nUnder the hood, this calls `pkgbuild::build()` and, ultimately, `R CMD build`, which is described further in the [Building package tarballs](https://cran.r-project.org/doc/manuals/R-exts.html#Building-package-tarballs) section of [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html).\n\nThis should tip you off that a package bundle or \"source tarball\" is not simply the result of making a tar archive of the source files, then compressing with gzip.\nBy convention, in the R world, a few more operations are carried out when making the `.tar.gz` file and this is why we've elected to refer to this form as a package **bundle**, in this book.\n\nEvery CRAN package is available in bundled form, via the \"Package source\" field of its landing page.\nContinuing our examples from above, you could download the bundles `forcats_0.4.0.tar.gz` and `readxl_1.3.1.tar.gz` (or whatever the current versions may be).\nYou could unpack such a bundle in the shell (not the R console) like so:\n\n``` bash\ntar xvf forcats_0.4.0.tar.gz\n```\n\nIf you decompress a bundle, you'll see it looks almost the same as a source package.\n@fig-package-files shows the files present in the source, bundled, and binary forms of a fictional package named zzzpackage.\nWe've deliberately crafted this example to include most of the package parts covered in this book.\nNot every package will include every file seen here, nor does this diagram include every possible file that might appear in a package.\n\n```{r}\n#| label: fig-package-files\n#| echo: false\n#| out-width: ~\n#| fig-cap: >\n#|   Package forms: source vs. bundled vs. binary.\n#| fig-alt: >\n#|   Side-by-side comparison of source, bundled, and binary package. \n#|   The flow of files (location and format) from package source to \n#|   bundled to binary state is shown. This is described in\n#|   detail in the appropriately named sections of this chapter.\nknitr::include_graphics(\"diagrams/package-files.png\")\n```\n\nThe main differences between a source package and an uncompressed bundle are:\n\n-   Vignettes have been built, so rendered outputs, such as HTML, appear below `inst/doc/` and a vignette index appears in the `build/` directory.\n\n-   A local source package might contain temporary files used to save time during development, like compilation artefacts in `src/`.\n    These are never found in a bundle.\n\n-   Any files listed in `.Rbuildignore` are not included in the bundle.\n    These are typically files that facilitate your development process, but that should be excluded from the distributed product.\n\n### `.Rbuildignore` {#sec-rbuildignore}\n\nYou won't need to contemplate the exact structure of package `.tar.gz` files very often, but you do need to understand the `.Rbuildignore` file.\nIt controls which files from the source package make it into the downstream forms.\n\nEach line of `.Rbuildignore` is a Perl-compatible regular expression that is matched, without regard to case, against the path to each file in the source package[^structure-1].\nIf the regular expression matches, that file or directory is excluded.\nNote there are some default exclusions implemented by R itself, mostly relating to classic version control systems and editors, such as SVN, Git, and Emacs.\n\n[^structure-1]: To see the set of filepaths that should be on your radar, execute `dir(full.names = TRUE, recursive = TRUE, include.dirs = TRUE, all.files = TRUE)` in the package's top-level directory.\n\nWe usually modify `.Rbuildignore` with the `usethis::use_build_ignore()` function, which takes care of easy-to-forget details, such as regular expression anchoring and escaping.\nTo exclude a specific file or directory (the most common use case), you **MUST** anchor the regular expression.\nFor example, to exclude a directory called \"notes\", the `.Rbuildignore` entry must be `^notes$`, whereas the unanchored regular expression `notes` will match any file name containing \"notes\", e.g.\n`R/notes.R`, `man/important-notes.R`, `data/endnotes.Rdata`, etc.\nWe find that `use_build_ignore()` helps us get more of our `.Rbuildignore` entries right the first time.\n\n`.Rbuildignore` is a way to resolve some of the tension between the practices that support your development process and CRAN's requirements for submission and distribution (@sec-release).\nEven if you aren't planning to release on CRAN, following these conventions will allow you to make the best use of R's built-in tooling for package checking and installation.\nThe files you should `.Rbuildignore` fall into two broad, semi-overlapping classes:\n\n-   Files that help you generate package contents programmatically. Examples:\n    -   Using `README.Rmd` to generate an informative and current `README.md` (@sec-readme).\n    -   Storing `.R` scripts to create and update internal or exported data (@sec-data-data-raw).\n-   Files that drive package development, checking, and documentation, outside of CRAN's purview. Examples:\n    -   Files relating to the RStudio IDE (@sec-workflow101-rstudio-projects).\n    -   Using the [pkgdown package](https://pkgdown.r-lib.org) to generate a website (@sec-website).\n    -   Configuration files related to continuous integration/deployment (@sec-sw-dev-practices-ci).\n\nHere is a non-exhaustive list of typical entries in the `.Rbuildignore` file for a package in the tidyverse:\n\n```         \n^.*\\.Rproj$         # Designates the directory as an RStudio Project\n^\\.Rproj\\.user$     # Used by RStudio for temporary files\n^README\\.Rmd$       # An Rmd file used to generate README.md\n^LICENSE\\.md$       # Full text of the license\n^cran-comments\\.md$ # Comments for CRAN submission\n^data-raw$          # Code used to create data included in the package\n^pkgdown$           # Resources used for the package website\n^_pkgdown\\.yml$     # Configuration info for the package website\n^\\.github$          # GitHub Actions workflows\n```\n\nNote that the comments above must not appear in an actual `.Rbuildignore` file; they are included here only for exposition.\n\nWe'll mention when you need to add files to `.Rbuildignore` whenever it's important.\nRemember that `usethis::use_build_ignore()` is an attractive way to manage this file.\nFurthermore, many usethis functions that add a file that should be listed in `.Rbuildignore` take care of this automatically.\nFor example, `use_read_rmd()` adds \"\\^README\\\\.Rmd\\$\" to `.Rbuildignore`.\n\n## Binary package {#sec-structure-binary}\n\nIf you want to distribute your package to an R user who doesn't have package development tools, you'll need to provide a **binary** package.\nThe primary maker and distributor of binary packages is CRAN, not individual maintainers.\nBut even if you delegate the responsibility of distributing your package to CRAN, it's still important for a maintainer to understand the nature of a binary package.\n\nLike a package bundle, a binary package is a single file.\nUnlike a bundled package, a binary package is platform specific and there are two basic flavors: Windows and macOS.\n(Linux users are generally required to have the tools necessary to install from `.tar.gz` files, although the emergence of resources like [Posit Public Package Manager](https://packagemanager.posit.co/) is giving Linux users the same access to binary packages as their colleagues on Windows and macOS.)\n\nBinary packages for macOS are stored as `.tgz`, whereas Windows binary packages end in `.zip`.\nIf you need to make a binary package, use `devtools::build(binary = TRUE)` on the relevant operating system.\nUnder the hood, this calls `pkgbuild::build(binary = TRUE)` and, ultimately, `R CMD INSTALL --build`, which is described further in the [Building binary packages](https://cran.r-project.org/doc/manuals/R-exts.html#Building-binary-packages) section of [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html).\nIf you choose to release your package on CRAN (@sec-release), you submit your package in bundled form, then CRAN creates and distributes the package binaries.\n\nCRAN packages are usually available in binary form, for both macOS and Windows, for the current, previous, and (possibly) development versions of R.\nContinuing our examples from above, you could download binary packages such as:\n\n-   forcats for macOS: `forcats_0.4.0.tgz`\n-   readxl for Windows: `readxl_1.3.1.zip`\n\nand this is, indeed, part of what's usually going on behind the scenes when you call `install.packages()`.\n\nIf you uncompress a binary package, you'll see that the internal structure is rather different from a source or bundled package.\n@fig-package-files includes this comparison, so this is a good time to revisit that diagram.\nHere are some of the most notable differences:\n\n-   There are no `.R` files in the `R/` directory - instead there are three files that store the parsed functions in an efficient file format.\n    This is basically the result of loading all the R code and then saving the functions with `save()`.\n    (In the process, this adds a little extra metadata to make things as fast as possible).\n\n-   A `Meta/` directory contains a number of `.rds` files.\n    These files contain cached metadata about the package, like what topics the help files cover and a parsed version of the `DESCRIPTION` file.\n    (You can use `readRDS()` to see exactly what's in those files).\n    These files make package loading faster by caching costly computations.\n\n-   The actual help content appears in `help/` and `html/` (no longer in `man/`).\n\n-   If you had any code in the `src/` directory, there will now be a `libs/` directory that contains the results of compiling the code.\n\n-   If you had any objects in `data/`, they have now been converted into a more efficient form.\n\n-   The contents of `inst/` are moved to the top-level directory.\n    For example, vignette files are now in `doc/`.\n\n-   Some files and folders have been dropped, such as `README.md`, `build/`, `tests/`, and `vignettes/`.\n\n## Installed package {#sec-installed-package}\n\nAn **installed** package is a binary package that's been decompressed into a package library (described in @sec-library).\n@fig-installation illustrates the many ways a package can be installed, along with a few other functions for converting a package from one state to another.\nThis diagram is complicated!\nIn an ideal world, installing a package would involve stringing together a set of simple steps: source -\\> bundle, bundle -\\> binary, binary -\\> installed.\nIn the real world, it's not this simple because there are often (faster) shortcuts available.\n\n```{r}\n#| label: fig-installation\n#| echo: false\n#| out-width: ~\n#| fig-cap: >\n#|   Many methods for converting between package states.\n#| fig-alt: > \n#|   A chart showing different ways to go from one package state to another:\n#|   1. library() puts an installed package into memory.\n#|   2. Functions such as install.packages(),\n#|      devtools::install_github(), and devtools::install()\n#|      can install a package starting variously in the source,\n#|      bundle, or binary forms.\n#|   3. devtools::build() can create a bundle or a binary.\n#|   4. devtools::load_all() puts a source package into memory.\nknitr::include_graphics(\"diagrams/install-load.png\")\n```\n\nThe built-in command line tool `R CMD INSTALL` powers all package installation.\nIt can install a package from source files, a bundle (a.k.a. a source tarball), or a binary package.\nDetails are available in the [Installing packages section](https://cran.r-project.org/doc/manuals/R-admin.html#Installing-packages) of [R Installation and Administration](https://cran.r-project.org/doc/manuals/R-admin.html).\nJust like with `devtools::build()`, devtools provides a wrapper function, `devtools::install()`, that makes this tool available from within an R session.\n\n::: callout-tip\n## RStudio\n\nRStudio can also help you install your in-development package via the *Install* and *More* drop-downs in the *Build* pane and with *Install Package* in the *Build* menu.\n:::\n\nMost useRs understandably like to install packages from the comfort of an R session and directly from CRAN.\nThe built-in function `install.packages()` meets this need.\nIt can download the package, in various forms, install it, and optionally attend to the installation of dependencies.\n\nThere is a price, however, for the convenience of installing R packages from within an R session.\nAs you might expect, it can be a bit tricky to re-install a package that is already in use in the current session.\nThis actually works most of the time, but sometimes it does not, especially when installing an R package with compiled code on Windows.\nDue to how file handles are locked on Windows, an attempt to install a new version of a package that's in use can result in a corrupt installation where the package's R code has been updated, but its compiled code has not.\nWhen troubleshooting, Windows users should strive to install packages in a clean R session, with as few packages loaded as possible.\n\nThe pak package (<https://pak.r-lib.org/>) is a relative newcomer (at the time of writing) and provides a promising alternative to `install.packages()`, as well as other more specialized functions such as `devtools::install_github()`.\nIt's too early to make a blanket recommendation for using pak for all of your package installation needs, but we are certainly using it more and more in our personal workflows.\nOne of pak's flagship features is that it nicely solves the \"locked DLL\" problem described above, i.e. updating a package with compiled code on Windows.\nAs you get deeper into package development, you will find yourself doing a whole new set of tasks, such as installing a dependency from an in-development branch or scrutinizing package dependency trees.\npak provides a rich toolkit for this and many other related tasks.\nWe predict that pak will soon become our official recommendation for how to install packages (and more).\n\nHowever, in the meantime, we describe the *status quo*.\ndevtools has long offered a family of `install_*()` functions to address some needs beyond the reach of `install.packages()` or to make existing capabilities easier to access.\nThese functions are actually maintained in the [remotes package](https://remotes.r-lib.org) and are re-exported by devtools.\n(Given what we said above, it is likely that remotes will essentially become superseded, in favor of pak, but we're not quite there yet.)\n\n```{r}\nlibrary(remotes)\n\nfuns <- as.character(lsf.str(\"package:remotes\"))\ngrep(\"^install_.+\", funs, value = TRUE)\n```\n\n`install_github()` is the most useful of these functions and is also featured in @fig-installation.\nIt is the flagship example of a family of functions that can download a package from a remote location that is not CRAN and do whatever is necessary to install it and its dependencies.\nThe rest of the devtools/remotes `install_*()` functions are aimed at making things that are technically possible with base tooling a bit easier or more explicit, such as `install_version()` which installs a specific version of a CRAN package.\n\nAnalogous to `.Rbuildignore`, described in section @sec-rbuildignore, `.Rinstignore` lets you keep files present in a package bundle out of the installed package.\nHowever, in contrast to `.Rbuildignore`, this is rather obscure and rarely needed.\n\n## In-memory package\n\nWe finally arrive at a command familiar to everyone who uses R:\n\n```{r, eval = FALSE}\nlibrary(usethis)\n```\n\nAssuming usethis is installed, this call makes its functions available for use, i.e. now we can do:\n\n```{r, eval = FALSE}\ncreate_package(\"/path/to/my/coolpackage\")\n```\n\nThe usethis package has been loaded into memory and, in fact, has also been attached to the search path.\nThe distinction between loading and attaching packages is not important when you're writing scripts, but it's very important when you're writing packages.\nYou'll learn more about the difference and why it's important in @sec-dependencies-attach-vs-load.\n\n`library()` is not a great way to iteratively tweak and test drive a package you're developing, because it only works for an installed package.\nIn @sec-workflow101-load-all, you'll learn how `devtools::load_all()` accelerates development by allowing you to load a source package directly into memory.\n\n## Package libraries {#sec-library}\n\nWe just discussed the `library()` function, whose name is inspired by what it does.\nWhen you call `library(somepackage)`, R looks through the current **libraries** for an installed package named \"somepackage\" and, if successful, it makes somepackage available for use.\n\nIn R, a **library** is a directory containing installed packages, sort of like a library for books.\nUnfortunately, in the R world, you will frequently encounter confused usage of the words \"library\" and \"package\".\nIt's common for someone to refer to dplyr, for example, as a library when it is actually a package.\nThere are a few reasons for the confusion.\nFirst, R's terminology arguably runs counter to broader programming conventions, where the usual meaning of \"library\" is closer to what we mean by \"package\".\nThe name of the `library()` function itself probably reinforces the wrong associations.\nFinally, this vocabulary error is often harmless, so it's easy for R users to fall into the wrong habit and for people who point out this mistake to look like insufferable pedants.\nBut here's the bottom line:\n\n> We use the `library()` function to load [^structure-2] a **package**.\n\n[^structure-2]: Well, actually, `library()` loads and attaches a package, but that's a topic for @sec-dependencies-attach-vs-load.\n\nThe distinction between the two is important and useful as you get involved in package development.\n\nYou can have multiple libraries on your computer.\nIn fact, many of you already do, especially if you're on Windows.\nYou can use `.libPaths()` to see which libraries are currently active.\nHere's how this might look on Windows:\n\n```{r, eval = FALSE}\n# on Windows\n.libPaths()\n#> [1] \"C:/Users/jenny/Documents/R/win-library/4.2\"\n#> [2] \"C:/Program Files/R/R-4.2.2/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#> [[1]]\n#>   [1] \"abc\"           \"anytime\"       \"askpass\"       \"assertthat\"   \n#>  ...\n#> [145] \"zeallot\"      \n#> \n#> [[2]]\n#>  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#>  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#>  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#> [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#> [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#> [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#> [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#> [29] \"translations\" \"utils\"\n```\n\nHere's a similar look on macOS (but your results may vary):\n\n```{r, eval = FALSE}\n# on macOS\n.libPaths()\n#> [1] \"/Users/jenny/Library/R/arm64/4.2/library\"\n#> [2] \"/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\"\n\nlapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE)\n#> [[1]]\n#>    [1] \"abc\"                  \"abc.data\"             \"abind\"                \n#>  ...\n#> [1033] \"Zelig\"                \"zip\"                  \"zoo\"                 \n#> \n#> [[2]]\n#>  [1] \"base\"         \"boot\"         \"class\"        \"cluster\"     \n#>  [5] \"codetools\"    \"compiler\"     \"datasets\"     \"foreign\"     \n#>  [9] \"graphics\"     \"grDevices\"    \"grid\"         \"KernSmooth\"  \n#> [13] \"lattice\"      \"MASS\"         \"Matrix\"       \"methods\"     \n#> [17] \"mgcv\"         \"nlme\"         \"nnet\"         \"parallel\"    \n#> [21] \"rpart\"        \"spatial\"      \"splines\"      \"stats\"       \n#> [25] \"stats4\"       \"survival\"     \"tcltk\"        \"tools\"       \n#> [29] \"translations\" \"utils\"\n```\n\nIn both cases we see two active libraries, consulted in this order:\n\n1.  A user library\n2.  A system-level or global library\n\nThis setup is typical on Windows, but is something you usually need to opt into on macOS and Linux[^structure-3].\nWith this setup, add-on packages installed from CRAN (or elsewhere) or under local development are kept in the user library.\nAbove, the macOS system is used as a primary development machine and has many packages here (\\~1000), whereas the Windows system is only used occasionally and is much more spartan.\nThe core set of base and recommended packages that ship with R live in the system-level library and are the same on all operating systems.\nThis separation appeals to many developers and makes it easy to, for example, clean out your add-on packages without disturbing your base R installation.\n\n[^structure-3]: For more details, see the [Maintaining R section](https://whattheyforgot.org/maintaining-r.html#how-to-transfer-your-library-when-updating-r) in *What They Forgot To Teach You About R*, [Managing Libraries](https://rstudio.github.io/r-manuals/r-admin/Add-on-packages.html#managing-libraries) in *R Installation and Administration* and the R help files for `?Startup` and `?.libPaths`.\n\nIf you're on macOS or Linux and only see one library, there is no urgent need to change anything.\nBut next time you upgrade R, consider creating a user-level library.\nBy default, R looks for a user library found at the path stored in the environment variable `R_LIBS_USER`, which itself defaults to `~/Library/R/m/x.y/library,` on macOS, and `~/R/m-library/x.y` on Linux (where `m` is a concise description of your CPU architecture, and `x.y` is the R version).\nYou can see this path with `Sys.getenv(\"R_LIBS_USER\")`.\nThese directories do not exist by default, and the use of them must be enabled by creating the directory.\nWhen you install a new version of R, and prior to installing any add-on packages, use `dir.create(Sys.getenv(\"R_LIBS_USER\"), recursive = TRUE)` to create a user library in the default location.\nNow you will have the library setup seen above.\nAlternatively, you could set up a user library elsewhere and tell R about that by setting the `R_LIBS_USER` environment variable in `.Renviron`.\nThe simplest way to edit your `.Renviron` file is with `usethis::edit_r_environ()`, which will create the file if it doesn't exist, and open it for editing.\n\nThe filepaths for these libraries also make it clear they are associated with a specific version of R (4.2.x at the time of writing), which is also typical.\nThis reflects and enforces the fact that you need to reinstall your add-on packages when you update R from, say, 4.1 to 4.2, which is a change in the **minor** version.\nYou generally do not need to re-install add-on packages for a **patch** release, e.g., going from R 4.2.1 to 4.2.2.\n\nAs your R usage grows more sophisticated, it's common to start managing package libraries with more intention.\nFor example, tools like [renv](https://rstudio.github.io/renv/) (and its predecessor [packrat](https://rstudio.github.io/packrat/)) automate the process of managing project-specific libraries.\nThis can be important for making data products reproducible, portable, and isolated from one another.\nA package developer might prepend the library search path with a temporary library, containing a set of packages at specific versions, in order to explore issues with backwards and forwards compatibility, without affecting other day-to-day work.\nReverse dependency checks are another example where we explicitly manage the library search path.\n\nHere are the main levers that control which libraries are active, in order of scope and persistence:\n\n-   Environment variables, like `R_LIBS` and `R_LIBS_USER`, which are consulted at startup.\n-   Calling `.libPaths()` with one or more filepaths.\n-   Executing small snippets of code with a temporarily altered library search path via `withr::with_libpaths()`.\n-   Arguments to individual functions, like `install.packages(lib =)` and `library(lib.loc =)`.\n\nFinally, it's important to note that `library()` should NEVER be used *inside a package*.\nPackages and scripts rely on different mechanisms for declaring their dependencies and this is one of the biggest adjustments you need to make in your mental model and habits.\nWe explore this topic fully in @sec-description-imports-suggests and @sec-dependencies-in-practice.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["plausible.html"],"output-file":"structure.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","bibliography":["book.bib"],"editor":"visual","theme":["cosmo","custom.scss"]},"extensions":{"book":{"multiFile":true}}}}}