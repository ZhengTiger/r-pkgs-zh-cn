{"title":"The package within","markdown":{"headingText":"The package within","headingAttr":{"id":"sec-package-within","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, echo = FALSE}\nsource(\"common.R\")\n```\n\n```{=html}\n<!--\n\nThis is still a mix of \"you\" and \"we\", but I feel like it's OK. I think there is a \"we\": we, as authors, guiding the reader (\"you\") through a learning exercise. Both parties are walking through the example, so it's OK to talk about \"we/our\" and \"you/your(s)\". Especially when describing mistakes, sometimes it feels better that \"we\" are making the mistake instead of only \"you\" the reader.\n\nUnused ideas for little data cleaning tasks:\n\n* dysfunctional missing value codes, e.g. where -99 means temp is missing\n\n* using the degree symbol properly with unicode escape sequence\n-->\n```\n\n本书的这一部分以与开始相同的方式结束，开发了一个小玩具包。\n@sec-whole-game 建立了包开发的基本机制、工作流程和工具，但几乎没有提及包内的 R 代码。\n本章主要关注包的 R 代码以及它与脚本中的 R 代码有何不同。\n\n从数据分析脚本开始，您将学习如何找到隐藏在其中的包。\n您将从脚本中分离并提取可重用的数据和逻辑，将其放入 R 包中，然后在简化得多的脚本中使用该包。\n我们在此过程中包含了一些菜鸟错误，以突出包内 R 代码的特殊注意事项。\n\n请注意，节标题包含北约音标（alfa、bravo 等），没有特定含义。\n它们只是一种方便的方式来标记我们在工作包方面取得的进展。\n仅通过阅读就可以跟进，并且本章是完全独立的，即它不是本书后面材料的先决条件。\n但是，如果您希望在此过程中查看特定文件的状态，可以在 [source files for the book](https://github.com/hadley/r-pkgs/tree/main/package-within-files) 中找到它们。\n\n\n## Alfa: a script that works\n\n```{=html}\n<!--\nThere's quite a bit of ugliness and awkwardness around paths here. But I'm not convinced it's worth it to do this properly, whatever that would even mean here.\n-->\n```\n\n让我们考虑一下 `data-cleaning.R`，这是一个虚构的数据分析脚本，用于收集游泳者的报告：\n\n> 你在哪里游泳，外面有多热？\n\n他们的数据通常以 CSV 文件的形式出现，例如 `swim.csv`：\n\n```{r echo = FALSE, comment = ''}\nwriteLines(readLines(\"package-within-files/alfa/swim.csv\"))\n```\n\n`data-cleaning.R` 首先将 `swim.csv` 读取到数据框中：\n\n```{r eval = FALSE}\ninfile <- \"swim.csv\"\n(dat <- read.csv(infile))\n```\n\n```{r echo = FALSE}\ninfile <- \"package-within-files/alfa/swim.csv\"\n(dat <- read.csv(infile))\n```\n\n然后，他们根据选择用来描述海洋和陆地交汇处的沙地的词，将每个观察结果分类为使用美式（“US”）或英式（“UK”）英语。\n`where` 列用于构建新的 `english` 列。\n\n```{r}\ndat$english[dat$where == \"beach\"] <- \"US\"\ndat$english[dat$where == \"coast\"] <- \"US\"\ndat$english[dat$where == \"seashore\"] <- \"UK\"\ndat$english[dat$where == \"seaside\"] <- \"UK\"\n```\n\n遗憾的是，温度通常以华氏度和摄氏度的混合形式报告。\n在没有更好的信息的情况下，他们猜测美国人报告的温度是华氏度，因此这些观测值被转换为摄氏度。\n\n```{r}\ndat$temp[dat$english == \"US\"] <- (dat$temp[dat$english == \"US\"] - 32) * 5/9\ndat\n```\n\n最后，这个清理过（更干净？）的数据被写回 CSV 文件。\n他们喜欢在执行此操作时在文件名中捕获时间戳[^package-within-1]。\n\n[^package-within-1]: `Sys.time()` 返回一个 `POSIXct` 类的对象，因此当我们对其调用 `format()` 时，我们实际上使用的是 `format.POSIXct()`。\n    如果您不熟悉此类格式字符串，请阅读 [`?format.POSIXct`](https://rdrr.io/r/base/strptime.html) 的帮助。\n\n```{r include = FALSE}\n# the code that constructs `outfile` is super simple and assumes `infile` is\n# just a filename\ninfile <- \"swim.csv\"\n```\n\n```{r}\nnow <- Sys.time()\ntimestamp <- format(now, \"%Y-%B-%d_%H-%M-%S\")\n(outfile <- paste0(timestamp, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile)))\nwrite.csv(dat, file = outfile, quote = FALSE, row.names = FALSE)\n```\n\n```{r include = FALSE}\n# move and rename the csv of clean data\noutfile <- fs::dir_ls(glob = \"*swim_clean.csv\")\nfs::file_move(outfile, \"package-within-files/alfa/swim_clean.csv\")\n```\n\n这是 `data-cleaning.R` 的全部内容：\n\n```{=html}\n<!--\nAny edits to the code shown above must be manually transferred to this file.\n-->\n```\n```{r, file = \"package-within-files/alfa/data-cleaning.R\", eval = FALSE}\n```\n\n即使您的典型分析任务非常不同，希望您在这里看到一些熟悉的模式。\n很容易想象，随着时间的推移，这个小组对许多相似的数据文件进行了非常相似的预处理。\n如果他们将这些标准数据操作作为包中的函数提供给他们自己使用，而不是将相同的数据和逻辑内联到几十个或数百个数据摄取脚本中，他们的分析就会更加高效和一致。\n\n\n## Bravo: a better script that works\n\n隐藏在原始脚本中的包实际上很难看到！\n它被一些次优的编码实践所掩盖，例如使用重复的复制/粘贴式代码以及代码和数据的混合。\n因此，好的第一步是重构此代码，分别在适当的对象和函数中隔离尽可能多的数据和逻辑。\n\n出于几个原因，这也是介绍一些附加包的使用的好时机。\n首先，我们实际上会使用 tidyverse 进行此类数据整理。\n其次，许多人在他们的脚本中使用附加包，因此很高兴了解如何在包内处理附加包。\n\n这是脚本的新改进版本。\n\n```{r, file = \"package-within-files/bravo/data-cleaning.R\", eval = FALSE}\n```\n\n需要注意的主要变化是：\n\n-   我们正在使用 tidyverse 包中的函数（特别是来自 readr 和 dplyr 的函数），并且我们通过 `library(tidyverse)` 提供它们。\n-   不同 \"beach\" 单词之间的映射以及它们被认为是美国英语还是英国英语现在被隔离在一个查找表中，这让我们可以使用 `left_join()` 一次性创建英语列。\n    这个查找表使映射更容易理解，并且将来更容易用新的 \"beach\" 词进行扩展。\n-   `f_to_c()`、`timestamp()` 和 `outfile_path()` 是新的辅助函数，它们包含转换温度和形成带时间戳的输出文件名的逻辑。\n\n识别此脚本的可重用位变得越来越容易，即与特定输入文件无关的位，如 `swim.csv`。\n这种重构通常在创建您自己的包的过程中自然发生，但如果没有发生，最好有意这样做。\n\n\n## Charlie: a separate file for helper functions\n\n典型的下一步是将可重用数据和逻辑从分析脚本中移出，并移到一个或多个单独的文件中。\n如果您想在多个分析中使用这些相同的帮助文件，这是一个常规的开场白。\n\n以下是 `beach-lookup-table.csv` 的内容：\n\n```{r echo = FALSE, comment = ''}\nwriteLines(readLines(\"package-within-files/charlie/beach-lookup-table.csv\"))\n```\n\n下面是 `cleaning-helpers.R` 的内容：\n\n```{r, file = \"package-within-files/charlie/cleaning-helpers.R\", eval = FALSE}\n```\n\n我们已将一些高级帮助函数 `localize_beach()` 和 `celsify_temp()` 添加到预先存在的帮助函数（`f_to_c()`、`timestamp()` 和 `outfile_path()`）中。\n\n这是数据清理脚本的下一个版本，现在我们已经提取了帮助函数（和查找表）。\n\n```{r, file = \"package-within-files/charlie/data-cleaning.R\", eval = FALSE}\n```\n\n请注意，脚本变得越来越短，并且希望更易于阅读和修改，因为重复和繁琐的杂乱已经消失了。\n代码是否真的更容易使用是主观的，取决于实际预处理游泳数据的人对“界面”的感觉有多自然。\n这些类型的设计决策是一个单独项目的主题：[design.tidyverse.org](https://design.tidyverse.org/)。\n\n让我们假设小组同意我们的设计决策是有前途的，即我们似乎正在让事情变得更好，而不是更糟。\n当然，现有代码并不完美，但这是一个典型的开发阶段，当您试图弄清楚辅助函数应该是什么以及它们应该如何工作时。\n\n\n## Delta: a failed attempt at making a package\n\n虽然第一次创建包的尝试将以失败告终，但通过一些常见的失误仍然有助于阐明幕后发生的事情。\n\n为了将 `cleaning-helpers.R` 转换为合适的包，您可能会采取以下最简单的步骤：\n\n-   使用 `usethis::create_package(\"path/to/delta\")` 搭建一个名为 “delta” 的新 R 包。\n    -   这是很好的第一步！\n-   将 `cleaning-helpers.R` 复制到新包中，具体为 `R/cleaning-helpers.R`。\n    -   这在道德上是正确的，但在几个方面在机制上是错误的，我们很快就会看到。\n-   将 `beach-lookup-table.csv` 复制到新包中。但是哪里？让我们试试源码包的顶层。\n    -   这不会有好结果。在包中运送数据文件是一个特殊主题，将在 @sec-data 中介绍。\n-   安装此包，可能使用 `devtools::install()` 或通过 Ctrl + Shift + B（Windows 和 Linux）或 RStudio 中的 Cmd + Shift + B。\n    -   尽管存在上述所有问题，但这确实有效！这很有趣，因为我们可以（尝试）使用它并看看会发生什么。\n\n```{r eval = FALSE, include = FALSE}\ncreate_package(\"package-within-files/delta\", open = FALSE)\n# say yes to the scary nested project question\nfs::file_copy(\n  \"package-within-files/charlie/cleaning-helpers.R\",\n  \"package-within-files/delta/R/cleaning-helpers.R\"\n)\nfs::file_copy(\n  \"package-within-files/charlie/beach-lookup-table.csv\",\n  \"package-within-files/delta/beach-lookup-table.csv\"\n)\ninstall(\"package-within-files/delta\")\n```\n\n这是您希望在成功安装此软件包（我们称之为 \"delta\"）后运行的下一个数据清理脚本版本。\n\n```{r, file = \"package-within-files/delta-data-cleaning.R\", eval = FALSE}\n```\n\n我们之前脚本的唯一变化是\n\n```{r eval = FALSE}\nsource(\"cleaning-helpers.R\")\n```\n\n被替换成了\n\n```{r eval = FALSE}\nlibrary(delta)\n```\n\n如果您安装 delta 包并尝试运行数据清理脚本，实际会发生以下情况：\n\n```{r eval = FALSE}\nlibrary(tidyverse)\nlibrary(delta)\n\ninfile <- \"swim.csv\"\ndat <- read_csv(infile, col_types = cols(name = \"c\", where = \"c\", temp = \"d\"))\n\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n#> Error in localize_beach(.) : could not find function \"localize_beach\"\n\nwrite_csv(dat, outfile_path(infile))\n#> Error in outfile_path(infile) : could not find function \"outfile_path\"\n```\n\n即使您调用 `library(delta)`，实际上也没有任何帮助函数可供使用！\n与 `source()`ing 帮助函数文件相比，附加包不会将其函数转储到全局工作区中。\n默认情况下，包中的函数仅供内部使用。\n您需要导出 `localize_beach()`、`celsify_temp()` 和 `outfile_path()`，以便您的用户可以调用它们。\n在 devtools 工作流程中，我们通过将 `@export` 放在每个函数上方的特殊 roxygen 注释中来实现这一点（名称空间管理在 @sec-dependencies-NAMESPACE-workflow 中介绍），如下所示：\n\n```{r eval = FALSE}\n#' @export\ncelsify_temp <- function(dat) {\n  mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp))\n}\n```\n\n在将 `@export` 标记添加到 `localize_beach()`、`celsify_temp()` 和 `outfile_path()` 之后，运行 `devtools::document()` 以（重新）生成 `NAMESPACE` 文件，并重新安装 delta 包。\n现在，当您重新执行数据清理脚本时，它就可以工作了！\n\n```{r eval = FALSE, include = FALSE}\nlines <- readLines(\"package-within-files/delta/R/cleaning-helpers.R\")\nfuns <- c(\"localize_beach\", \"celsify_temp\", \"outfile_path\")\nfun_locs <- vapply(paste0(\"^\", funs), \\(x) grep(x, lines), 1L)\ninsert <- function(x, value, locs) {\n  n <- length(locs)\n  ret <- character(length(x) + n)\n  j <- 0\n  for (i in seq_along(x)) {\n    if (j < n && i == locs[j + 1]) {\n      ret[i + j] <- value\n      j <- j + 1\n    }\n    ret[i + j] <- x[i]\n  }\n  ret\n}\nnew_lines <- insert(lines, value = \"#' @export\", locs = fun_locs)\nwriteLines(new_lines, \"package-within-files/delta/R/cleaning-helpers.R\")\ndocument(\"package-within-files/delta\")\ninstall(\"package-within-files/delta\")\n```\n\n更正：它有时会起作用。\n具体来说，当且仅当工作目录设置为源包的顶层时，它才有效。\n从任何其他工作目录，您仍然会收到错误消息：\n\n```{r eval = FALSE}\ndat <- dat %>% \n  localize_beach() %>% \n  celsify_temp()\n#> Error: 'beach-lookup-table.csv' does not exist in current working directory ('/Users/jenny/tmp').\n```\n\n找不到在 `localize_beach()` 内部查询的查找表。\n人们不会简单地将 CSV 文件转储到 R 包的源代码中并期望事情“正常工作”。\n我们将在包的下一次迭代中解决这个问题（@sec-data 全面介绍了如何在包中包含数据）。\n\n在我们放弃这个最初的实验之前，让我们也惊叹于您能够安装、附加并在一定程度上使用一个根本损坏的包这一事实。\n`devtools::load_all()` 也工作正常！\n这是一个发人深省的提醒，您应该在开发过程中经常运行 `R CMD check`，可能是通过 `devtools::check()`。\n这将迅速提醒您注意许多简单安装和使用无法揭示的问题。\n\n事实上，这个包的 `check()` 失败了，你会看到：\n\n```         \n * installing *source* package ‘delta’ ...\n ** using staged installation\n ** R\n ** byte-compile and prepare package for lazy loading\n Error in library(tidyverse) : there is no package called ‘tidyverse’\n Error: unable to load R code in package ‘delta’\n Execution halted\n ERROR: lazy loading failed for package ‘delta’\n * removing ‘/Users/jenny/rrr/delta.Rcheck/delta’\n```\n\n\"there is no package called 'tidyverse'\" 是什么意思？\n我们在主脚本中使用它，没有任何问题！\n另外，我们已经安装并使用了这个包，为什么 `R CMD check` 找不到呢？\n\n当 `R CMD check` 的严格性符合 `R/cleaning-helpers.R` 的第一行时会发生此错误：\n\n```{r, eval = FALSE}\nlibrary(tidyverse)\n```\n\n这不是您声明包依赖于另一个包（在本例中为 tidyverse）的方式。\n这也不是您使另一个包中的函数可用于您的包的方式。\n依赖关系必须在 `DESCRIPTION` 中声明（这还不是全部）。\n由于我们声明没有依赖关系，`R CMD check` 相信我们并尝试安装我们的包，只有可用的基础包，这意味着这个 `library(tidyverse)` 调用失败。 \n“常规”安装成功，仅仅是因为 tidyverse 在您的常规库中可用，它隐藏了这个特定的错误。\n\n回顾一下，将 `cleaning-helpers.R` 复制到 `R/cleaning-helpers.R`，而无需进一步修改，在（至少）以下方面存在问题：\n\n-   不考虑导出函数与非导出函数。\n-   在已安装的包中找不到包含查找表的 CSV 文件。\n-   没有正确声明我们对其他附加包的依赖。\n\n\n## Echo: a working package\n\n我们已经准备好制作这个包的最小版本。\n\n```{r eval = FALSE, include = FALSE}\ncreate_package(\"package-within-files/echo\", open = FALSE)\n# say yes to the scary nested project question\nfs::file_copy(\n  \"package-within-files/echo-cleaning-helpers.R\",\n  \"package-within-files/echo/R/cleaning-helpers.R\"\n)\nwith_project(\"package-within-files/echo\", use_package(\"dplyr\"))\nwith_project(\"package-within-files/echo\", use_mit_license())\ninstall(\"package-within-files/echo\")\ncheck(\"package-within-files/echo\")\n```\n\n这是 `R/cleaning-helpers.R` 的新版本[^package-within-2]：\n\n[^package-within-2]: 将所有内容都放在一个文件中并使用此名称并不理想，但技术上是允许的。\n    我们在 @sec-code-organising 中讨论 `R/` 下面的文件的组织和命名。\n\n```{r, file = \"package-within-files/echo/R/cleaning-helpers.R\", eval = FALSE}\n```\n\n我们已经回到使用 R 代码定义 `lookup_table`，因为最初尝试从 CSV 读取它会造成某种文件路径混乱。\n这对于小的、内部的、静态的数据是可以的，但是请记住参阅 @sec-data 以了解在包中存储数据的更通用的技术。\n\n现在，所有对 tidyverse 函数的调用都已使用实际提供该函数的特定包的名称进行限定，例如 `dplyr::mutate()`。\n还有其他方法可以访问另一个包中的函数，如 @sec-dependencies-in-imports 所述，但这是我们推荐的默认方法。\n我们也强烈建议没有人依赖 package 中的 tidyverse meta-package[^package-within-3]。\n相反，最好确定您实际使用的特定包。\n在这种情况下，包只使用 dplyr。\n\n[^package-within-3]: 博客文章 [The tidyverse is for EDA, not packages](https://www.tidyverse.org/blog/2018/06/tidyverse-not-for-packages/) 对此进行了详细说明。\n\n`library(tidyverse)` 调用消失了，取而代之的是我们在 `DESCRIPTION` 的 `Imports` 字段中声明使用 `dplyr`：\n\n```         \nPackage: echo\n(... other lines omitted ...)\nImports: \n    dplyr\n```\n\n这与使用命名空间限定的调用（如 `dplyr::left_join()`）一起，构成了在您的包中使用另一个包的有效方法。\n通过 `DESCRIPTION` 传送的 metadata 在 @sec-description 中介绍。\n\n所有面向用户的函数在其 roxygen 注释中都有一个 `@export` 标记，这意味着 `devtools::document()` 将它们正确添加到 `NAMESPACE` 文件中。\n请注意，`f_to_c()` 目前仅在内部使用，在 `celsify_temp()` 内部，因此不会导出（对于 `timestamp()` 也是如此）。\n\n这个版本的包可以安装、使用，并且它在技术上通过了 `R CMD check`，尽管有 1 warning 和 1  note。\n\n```         \n* checking for missing documentation entries ... WARNING\nUndocumented code objects:\n  ‘celsify_temp’ ‘localize_beach’ ‘outfile_path’\nAll user-level objects in a package should have documentation entries.\nSee chapter ‘Writing R documentation files’ in the ‘Writing R\nExtensions’ manual.\n\n* checking R code for possible problems ... NOTE\ncelsify_temp: no visible binding for global variable ‘english’\ncelsify_temp: no visible binding for global variable ‘temp’\nUndefined global functions or variables:\n  english temp\n```\n\n\"no visible binding\" note 是在包内使用 dplyr 和不带引号的变量名的一个特点，其中使用裸变量名（`english` 和 `temp`）看起来很可疑。\n您可以将这些行中的任何一行添加到 `R/` 下面的任何文件中以删除此注释（例如 @sec-man-package-doc 中描述的包级文档文件）：\n\n```{r, eval = FALSE}\n# option 1 (then you should also put utils in Imports)\nutils::globalVariables(c(\"english\", \"temp\"))\n\n# option 2\nenglish <- temp <- NULL\n```\n\n我们看到围绕像 dplyr 这样大量使用非标准评估的包进行编程可能很棘手。\n在幕后，这是允许 dplyr 的最终用户使用裸（未引用）变量名的技术。\n像 dplyr 这样的软件包优先考虑典型最终用户的体验，但代价是让他们更难以依赖。\n上面显示的两个用于抑制 \"no visible binding\" note 的选项代表入门级解决方案。\n有关这些问题的更复杂处理，请参阅 `vignette(\"in-packages\", package = \"dplyr\")` 和 `vignette(\"programming\", package = \"dplyr\")`。\n\n关于缺少文档的 warning 是因为没有正确记录导出的函数。\n这是一个合理的问题，您绝对应该在一个真正的包中解决这个问题。\n您已经在 @sec-whole-game-document 中了解了如何创建带有 roxygen 注释的帮助文件，我们将在 @sec-man 中全面介绍该主题。\n\n\n## Foxtrot: build time vs. run time {#sec-package-within-build-time-run-time}\n\necho 包很好用，但小组成员注意到时间戳有些奇怪：\n\n```{r, eval = FALSE}\nSys.time()\n#> [1] \"2023-03-26 22:48:48 PDT\"\n\noutfile_path(\"INFILE.csv\")\n#> [1] \"2020-September-03_11-06-33_INFILE_clean.csv\"\n```\n\n带时间戳的文件名中的日期时间不反映系统报告的时间。\n事实上，用户声称时间戳似乎永远不会改变！\n为什么是这样？\n\n回想一下我们是如何形成输出文件的文件路径的：\n\n```{r, eval = FALSE}\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n```\n\n事实上，我们在 `outfile_path()` 的定义之外捕获了 `now <- Sys.time()` 可能已经让一些读者烦恼了一段时间。\n`now` 反映了我们执行 `now <- Sys.time()` 时的时间。\n在最初的方法中，现在是在我们 `source()`d `cleaning-helpers.R` 时分配的。\n这并不理想，但这可能是一个非常无害的错误，因为帮助文件将在我们编写输出文件之前不久被 `source()`d。\n\n但这种方法在包的上下文中是相当具有破坏性的。\n`now <- Sys.time()` 在构建包时执行[^package-within-4]。\n再也不会了。\n很容易假设您的包裹代码在附加或使用包裹时被重新评估。\n但事实并非如此。\n是的，函数中的代码在调用时绝对会运行。\n但是您的函数——以及在 `R/` 下面的顶级代码中创建的任何其他对象——在构建时只定义一次。\n\n[^package-within-4]: 这里我们指的是编译包代码的时间，可以是生成二进制文件时（for macOS or Windows; @sec-structure-binary），也可以是从源代码安装包时（@sec-installed-package）。\n\n通过在 `R/` 下使用顶级代码定义 `now`，我们注定了我们的包会用相同（错误）的时间为其所有输出文件加上时间戳。\n解决方法是确保 `Sys.time()` 调用在运行时发生。\n\n我们再看一下 `R/cleaning-helpers.R` 的部分内容：\n\n```{r}\nlookup_table <- dplyr::tribble(\n      ~where, ~english,\n     \"beach\",     \"US\",\n     \"coast\",     \"US\",\n  \"seashore\",     \"UK\",\n   \"seaside\",     \"UK\"\n)\n\nnow <- Sys.time()\ntimestamp <- function(time) format(time, \"%Y-%B-%d_%H-%M-%S\")\noutfile_path <- function(infile) {\n  paste0(timestamp(now), \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n```\n\n这段摘录中有四个顶级 `<-` 赋值。\n数据框 `lookup_table` 和函数 `timestamp()` 和 `outfile_path()` 的顶级定义是正确的。\n这些在构建时只定义一次是合适的。\n`now` 的顶级定义，然后在 `outfile_path()` 内部使用，令人遗憾。\n\n以下是 `outfile_path()` 的更好版本：\n\n```{r, eval = FALSE}\n# always timestamp as \"now\"\noutfile_path <- function(infile) {\n  ts <- timestamp(Sys.time())\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n\n# allow user to provide a time, but default to \"now\"\noutfile_path <- function(infile, time = Sys.time()) {\n  ts <- timestamp(time)\n  paste0(ts, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))\n}\n```\n\n这说明在包内定义对象时需要有不同的思维方式。\n这些对象中的绝大多数应该是函数，并且这些函数通常应该只使用它们创建的数据或通过参数传递的数据。\n有一些类型的草率在函数使用前立即定义时是相当无害的，但对于作为包分发的函数来说，这种草率的代价可能更高。\n\n\n## Golf: side effects {#sec-package-within-side-effects}\n\n时间戳现在反映了当前时间，但该小组提出了一个新的问题。\n就目前而言，时间戳反映了谁完成了数据清理以及他们在世界的哪个部分。\n时间戳策略的核心是这种格式 string[^package-within-5]：\n\n[^package-within-5]: `Sys.time()` 返回一个 `POSIXct` 类的对象，因此当我们对其调用 `format()` 时，我们实际上使用的是 `format.POSIXct()`。\n    如果您不熟悉此类格式字符串，请阅读 [`?format.POSIXct`](https://rdrr.io/r/base/strptime.html) 的帮助。\n\n```{r}\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n```\n\n这会将 `Sys.time()` 格式化为包含月份名称（而非数字）和本地时间[^package-within-6]。\n\n[^package-within-6]: 显然，根据 ISO 8601 进行格式化会更好，ISO 8601 按数字对月份进行编码，但是为了使这个示例更加明显，请迁就我。\n\n@tbl-timestamps 显示了当这样一个时间戳是由几个假设的同事在完全相同的时间及时清理一些数据时产生的。\n\n```{r, include = FALSE}\nlibrary(tidyverse)\n\nas_if <- function(time = Sys.time(), LC_TIME = NULL, tz = NULL, ...) {\n  if (!is.null(LC_TIME)) {\n    withr::local_locale(c(\"LC_TIME\" = LC_TIME))\n  }\n  if (!is.null(tz)) {\n    withr::local_timezone(tz)\n  }\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\n\ncolleagues <- tribble(\n  ~location, ~LC_TIME, ~tz, \n  \"Rome, Italy\", \"it_IT.UTF-8\", \"Europe/Rome\",\n  \"Warsaw, Poland\",  \"pl_PL.UTF-8\", \"Europe/Warsaw\",\n  \"Sao Paulo, Brazil\",  \"pt_BR.UTF-8\", \"America/Sao_Paulo\",\n  \"Greenwich, England\",  \"en_GB.UTF-8\", \"Europe/London\",\n  \"\\\"Computer World!\\\"\", \"C\", \"UTC\"\n)\n\n# I don't want the instant to change everytime we render the book, so NO:\n# now <- Sys.time()\n\n# I don't want the fixed instant to have an explicit tzone attribute, so NO:\n# now <- as.POSIXct(\"2020-09-04 22:30:00\", tz = \"UTC\")\n\n# I want a specific, fixed instant, with no explicit tzone\ninstant <- as.POSIXct(1599258600, origin = \"1970-01-01\")\n\ncolleagues <- colleagues |> \n  mutate(timestamp = pmap_chr(\n    pick(everything()), as_if, time = instant\n  ), .after = location)\n```\n\n```{r}\n#| echo: false\n#| label: tbl-timestamps\n#| tbl-cap: Timestamp varies by locale and timezone.\nknitr::kable(colleagues)\n```\n\n请注意，月份名称会有所不同，时间也会有所不同，甚至日期也会有所不同！\n最安全的选择是根据固定的语言环境和时区形成时间戳（大概是上面 \"Computer World!\" 所代表的非地理选择）。\n\n您进行了一些研究，了解到可以通过 `Sys.setlocale()` 强制使用特定区域设置，并通过设置 TZ 环境变量强制使用特定时区。\n具体来说，我们将语言环境的 LC_TIME 组件设置为 \"C\"，将时区设置为 \"UTC\"（协调世界时）。\n这是您改进 `timestamp()` 的第一次尝试：\n\n```{r include = FALSE}\nlc_time <- Sys.getlocale(\"LC_TIME\")\ntz <- Sys.getenv(\"TZ\")\n```\n\n```{r}\ntimestamp <- function(time = Sys.time()) {\n  Sys.setlocale(\"LC_TIME\", \"C\")\n  Sys.setenv(TZ = \"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\n```\n\n但是您的巴西同事注意到，在她使用您的包中的 `outfile_path()` 之前和之后，日期时间打印不同：\n\n之前：\n\n```{r eval = FALSE}\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n```\n\n```{r echo = FALSE}\nas_if(LC_TIME = \"pt_BR.UTF-8\", tz = \"America/Sao_Paulo\")\n```\n\n之后：\n\n```{r}\noutfile_path(\"INFILE.csv\")\n\nformat(Sys.time(), \"%Y-%B-%d_%H-%M-%S\")\n```\n\n```{r include = FALSE}\nSys.setlocale(\"LC_TIME\", lc_time)\nif (tz == \"\") {\n  Sys.unsetenv(\"TZ\")\n} else {\n  Sys.setenv(TZ = tz)\n}\n```\n\n请注意，她的月份名称从葡萄牙语切换为英语，而且时间显然是在不同的时区报告的。\n在 `timestamp()` 中对 `Sys.setlocale()` 和 `Sys.setenv()` 的调用对她的 R 会话进行了持续（并且非常令人惊讶）的更改。\n这种副作用是非常不受欢迎的，并且极难追踪和调试，尤其是在更复杂的设置中。\n\n以下是 `timestamp()` 的更好版本：\n\n```{r, eval = FALSE}\n# use withr::local_*() functions to keep the changes local to timestamp()\ntimestamp <- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  withr::local_timezone(\"UTC\")\n  format(time, \"%Y-%B-%d_%H-%M-%S\")\n}\n\n# use the tz argument to format.POSIXct()\ntimestamp <- function(time = Sys.time()) {\n  withr::local_locale(c(\"LC_TIME\" = \"C\"))\n  format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n}\n\n# put the format() call inside withr::with_*()\ntimestamp <- function(time = Sys.time()) {\n  withr::with_locale(\n    c(\"LC_TIME\" = \"C\"),\n    format(time, \"%Y-%B-%d_%H-%M-%S\", tz = \"UTC\")\n  )\n}\n```\n\n这些显示了各种方法来限制我们对 LC_TIME 和时区的更改范围。\n一个好的经验法则是尽可能缩小此类更改的范围并切实可行。\n`format()` 的 `tz` 参数是处理时区的最手术方法，但 LC_TIME 不存在类似的方法。\n我们使用 withr 包进行临时区域设置修改，它为临时状态更改提供了一个非常灵活的工具包。\n这（和 `base::on.exit()`）将在 @sec-code-r-landscape 中进一步讨论。\n请注意，如果您像我们上面那样使用 withr，则需要在 `Imports` 的 `DESCRIPTION` 中列出它（@sec-dependencies-in-practice, @sec-dependencies-tidyverse）。\n\n这强调了上一节的一点：在包内定义函数时需要采用不同的思维方式。\n尽量避免对用户的整体状态进行任何更改。\n如果此类更改不可避免，请确保撤销它们（如果可能）或明确记录它们（如果与功能的主要目的相关）。\n\n\n## Concluding thoughts\n\n最后，经过多次迭代，我们成功将游泳调查的重复数据清理代码提取到 R 包中。\n这个例子结束了本书的第一部分，标志着过渡到关于特定包组件的更详细的参考资料。\n在我们继续之前，让我们回顾一下本章中学到的教训。\n\n### Script vs.package\n\n当您第一次听说 R 专家用户经常将他们的代码放入包中时，您可能想知道这到底是什么意思。\n具体来说，您现有的 R 脚本、R Markdown 报告和 Shiny 应用程序会发生什么变化？\n是否所有这些代码都以某种方式被放入一个包中？\n在大多数情况下，答案是否定的。\n\n通常，您会识别跨多个项目发生的某些重复操作，这就是您提取到 R 包中的内容。\n你仍然会有 R 脚本、R Markdown 报告和 Shiny 应用程序，但是通过将特定的代码片段移动到一个正式的包中，你的数据产品往往会变得更加简洁和易于维护。\n\n### Finding the package within\n\n尽管本章中的示例相当简单，但它仍然捕获了开发供个人或组织使用的 R 包的典型过程。\n您通常从分散在不同项目中的一组特殊且相关的 R 脚本开始。\n随着时间的推移，您开始注意到某些需求一遍又一遍地出现。\n\n每次重新访问类似的分析时，与上一次迭代相比，您可能会尝试提升游戏水平。\n您使用更健壮的模式重构复制/粘贴式代码，并开始将关键“移动”封装在辅助函数中，这些函数最终可能会迁移到它们自己的文件中。\n一旦你到达这个阶段，你就可以采取下一步并创建一个包。\n\n### Package code is different\n\n编写包代码与编写 R 脚本有点不同，在进行这种调整时自然会感到有些不适。\n以下是一开始让我们中的许多人感到困惑的最常见陷阱：\n\n-   包代码需要新的方法来处理其他包中的函数。`DESCRIPTION` 文件是声明依赖关系的主要方式；我们不通过 `library(somepackage)` 来做到这一点。\n-   如果您希望数据或文件持久可用，可以使用包特定的存储和检索方法。您不能只是将文件放入包中并希望得到最好的结果。\n-   有必要明确哪些功能是面向用户的，哪些是内部助手。默认情况下，函数不会被导出供其他人使用。\n-   需要新级别的纪律来确保代码在预期时间（构建时间与运行时间）运行并且没有意外的副作用。\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["plausible.html"],"output-file":"package-within.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","bibliography":["book.bib"],"editor":"source","mainfont":"Microsoft Yahei","theme":["cosmo","custom.scss"]},"extensions":{"book":{"multiFile":true}}}}}